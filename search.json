[{"path":"https://openpharma.github.io/visR/articles/CDISC_ADaM.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Survival Analysis with visR using CDISC ADaM Time-To-Event Analysis Dataset (ADTTE)","text":"tutorial illustrates standard time--event analysis can done efficiently data set adheres CDISC ADaM standard. detailed time--event analysis broad overview visR’s functionality presented another vignette.","code":"library(ggplot2) library(visR)"},{"path":"https://openpharma.github.io/visR/articles/CDISC_ADaM.html","id":"global-document-setup","dir":"Articles","previous_headings":"","what":"Global Document Setup","title":"Survival Analysis with visR using CDISC ADaM Time-To-Event Analysis Dataset (ADTTE)","text":"","code":"# Metadata Title DATASET <- paste0(\"Analyis Data Time-To-Event (ADTTE)\")  # Save original options() old <- options()    # Global formatting options options(digits = 3)  # Global ggplot settings theme_set(theme_bw())  # Global table settings  options(DT.options = list(pageLength = 10,                            language = list(search = 'Filter:'),                            scrollX = TRUE))  # load ADTTE from CDISC pilot  data(adtte)  # Restore original options() options(old)"},{"path":"https://openpharma.github.io/visR/articles/CDISC_ADaM.html","id":"time-to-event-analysis","dir":"Articles","previous_headings":"","what":"Time-to-event analysis","title":"Survival Analysis with visR using CDISC ADaM Time-To-Event Analysis Dataset (ADTTE)","text":"visR includes wrapper function easily display summary tables (e.g. tableone) wrapper function estimate Kaplan-Meier curve compatible %>% purrr::map functions without losing traceability dataset name inside call object. data set adheres CDISC ADaM standards, stratifier needs specified. Given survival object, visR includes several functions quickly extract additional information survival object (e.g. test statistics p-values) general function display table (render). survival object can plotted using visR function visr. Additional information like confidence intervals risktable can added plot.","code":"# Display a summary table (e.g. tableone) visR::tableone(adtte[,c(\"TRTP\", \"AGE\")],          title = \"Demographic summary\" , datasource = DATASET) # Estimate a survival object survfit_object <-  adtte %>%   visR::estimate_KM(data = ., strata = \"TRTP\") survfit_object #> Call: ~survival::survfit(formula = survival::Surv(AVAL, 1 - CNSR) ~  #>     TRTP, data = data) #>  #>                            n events median 0.95LCL 0.95UCL #> TRTP=Placebo              86     29     NA      NA      NA #> TRTP=Xanomeline High Dose 84     61     36      25      47 #> TRTP=Xanomeline Low Dose  84     62     33      28      51 # Display test statistics associated with the survival estimate  visR::render(survfit_object %>% get_pvalue(), title = \"P-values\", datasource = DATASET) # Create and display a Kaplan-Meier from the survival object and add a risktable visr(survfit_object) %>%    visR::add_CI() %>%   visR::add_risktable()"},{"path":[]},{"path":"https://openpharma.github.io/visR/articles/Consort_flow_diagram.html","id":"data-preparation","dir":"Articles","previous_headings":"Attrition example","what":"Data preparation","title":"Creating consort flow diagram with visR","text":"Prepare data using attrition function.","code":"attrition <- visR::get_attrition(adtte,    criteria_descriptions = c(\"1. Not in Placebo Group\",                              \"2. Be 75 years of age or older.\",                              \"3. White\",                              \"4. Female\"),    criteria_conditions   = c(\"TRTP != 'Placebo'\",                              \"AGE >= 75\",                              \"RACE=='WHITE'\",                              \"SEX=='F'\"),    subject_column_name   = \"USUBJID\")"},{"path":"https://openpharma.github.io/visR/articles/Consort_flow_diagram.html","id":"render-chart","dir":"Articles","previous_headings":"Attrition example","what":"Render chart","title":"Creating consort flow diagram with visR","text":"Draw CONSORT attrition chart without specifying extra text complement","code":"attrition %>%   visR::visr(\"Criteria\", \"Remaining N\")"},{"path":"https://openpharma.github.io/visR/articles/Consort_flow_diagram.html","id":"adding-more-detail","dir":"Articles","previous_headings":"Attrition example","what":"Adding more detail","title":"Creating consort flow diagram with visR","text":"Adding detailed complement descriptions “exclusion” part CONSORT diagram","code":""},{"path":"https://openpharma.github.io/visR/articles/Consort_flow_diagram.html","id":"add-the-control-group","dir":"Articles","previous_headings":"Attrition example > Adding more detail","what":"Add the control group","title":"Creating consort flow diagram with visR","text":"Step 1. Add new column attrition dataframe","code":"attrition$Complement <- c(\"NA\", \"Placebo Group\", \"Younger than 75 years\", \"Non-White\", \"Male\")"},{"path":"https://openpharma.github.io/visR/articles/Consort_flow_diagram.html","id":"define-metadata","dir":"Articles","previous_headings":"Attrition example > Adding more detail","what":"Define metadata","title":"Creating consort flow diagram with visR","text":"Step 2. Define name column call plotting function","code":"attrition %>%   visR::visr(\"Criteria\", \"Remaining N\", \"Complement\")"},{"path":[]},{"path":"https://openpharma.github.io/visR/articles/Consort_flow_diagram.html","id":"styling-the-consort-flowchart-","dir":"Articles","previous_headings":"Additional features","what":"Styling the CONSORT flowchart.","title":"Creating consort flow diagram with visR","text":"Change fill outline boxes flowchart","code":"attrition %>%   visR::visr(\"Criteria\", \"Remaining N\", \"Complement\", fill = \"lightblue\", border=\"grey\")"},{"path":"https://openpharma.github.io/visR/articles/Consort_flow_diagram.html","id":"adjusting-size","dir":"Articles","previous_headings":"Additional features","what":"Adjusting size","title":"Creating consort flow diagram with visR","text":"Adjust font size boxes","code":"attrition %>%  visR::visr(\"Criteria\", \"Remaining N\", font_size = 10)"},{"path":[]},{"path":"https://openpharma.github.io/visR/articles/interactive_tte_tutorial/tte_tutorial.html","id":"section-visr---a-package-for-effective-visualizations-in-pharma","dir":"Articles > Interactive_tte_tutorial","previous_headings":"Welcome","what":"visR - A package for Effective Visualizations in Pharma","title":"visR","text":"tutorial introduce basic usage visR, R package effective visual communication. package presents easy--use interface visualizations relevant clinical development process, implementing several best practices. developed part openpharma initiative, effort open-source cross-industry collaboration.","code":""},{"path":"https://openpharma.github.io/visR/articles/interactive_tte_tutorial/tte_tutorial.html","id":"section-further-reading","dir":"Articles > Interactive_tte_tutorial","previous_headings":"Welcome","what":"Further reading","title":"visR","text":"graphical principles visR aims implement [graphicsprinciples.github.io] visR Documentation [openpharma.github.io/visR] visR @ GitHub [github.com/openpharma/visR] visR @ CRAN [cran.r-project.org/web/packages/visR] openpharma overview [openpharma.github.io]","code":""},{"path":"https://openpharma.github.io/visR/articles/interactive_tte_tutorial/tte_tutorial.html","id":"section-package-architecture","dir":"Articles > Interactive_tte_tutorial","previous_headings":"","what":"Package architecture","title":"visR","text":"visR package implements simple--use interface adhering consistent naming conventions.","code":""},{"path":"https://openpharma.github.io/visR/articles/interactive_tte_tutorial/tte_tutorial.html","id":"section-overview","dir":"Articles > Interactive_tte_tutorial","previous_headings":"Package architecture","what":"Overview","title":"visR","text":"principle, extimate_XXX functions allow estimate statistical models data (e.g. estimate_KM estimates survival model), get_XXX functions get kinds summary statistics (e.g. get_tableone get_pvalue), render visr display plots tables, add_XXX functions add specific information plot table (e.g. add_CI adds confidence intervals plot.)","code":""},{"path":[]},{"path":"https://openpharma.github.io/visR/articles/interactive_tte_tutorial/tte_tutorial.html","id":"section-outline","dir":"Articles > Interactive_tte_tutorial","previous_headings":"Package architecture","what":"Outline","title":"visR","text":"tutorial walk basic survival analysis show-casing principles features visR. start introducing data set provided COVID-19 India Org Data Operations Group use throughout tutorial. introduce -called table 1 gives overview patient population. estimate_ survival model introduce functions get_ summary statistics. plot survival model show can add_ additional information . integrate summary statistics plots.","code":""},{"path":"https://openpharma.github.io/visR/articles/interactive_tte_tutorial/tte_tutorial.html","id":"section-the-study-and-the-data","dir":"Articles > Interactive_tte_tutorial","previous_headings":"","what":"The study and the data","title":"visR","text":"Risk Survival Analysis COVID Outbreak Data :Lessons India goal paper assess mortality India due COVID-19. understand survival COVID-19 patients, time--event analysis performed based Kaplan-Meier estimates using gender age group (separately combined) strata. According authors (Bankar et al., 2021), probably biggest retrospective-cohort survival analysis conducted India, according authors. paper used publicly available data COVID-19 India Org Data Operations Group. figure roughly described trends distributions patient population.","code":""},{"path":"https://openpharma.github.io/visR/articles/interactive_tte_tutorial/tte_tutorial.html","id":"section-the-data","dir":"Articles > Interactive_tte_tutorial","previous_headings":"The study and the data","what":"The data","title":"visR","text":"Patients admitted Karnakata, South India, recruited. final dataset consists 26,741 patients. Age gender patient, number days hospital per stay, status patient (1=censored/alive, 2=dead) age category (<18 yr, 18 yr – 60 yr, >60 yr) collected. [Publication] [GitHub] [Raw data]","code":"# First, we set the default ggplot2 theme theme_set(theme_bw())  # Then, we directly load the data from their GitHub repository data = read.csv(\"https://raw.githubusercontent.com/vntkumar8/covid-survival/main/data/final.csv\")  data"},{"path":"https://openpharma.github.io/visR/articles/interactive_tte_tutorial/tte_tutorial.html","id":"section-preparing-the-data","dir":"Articles > Interactive_tte_tutorial","previous_headings":"The study and the data","what":"Preparing the data","title":"visR","text":"analysis, slight modifications need implemented data. Since visR developed goal speed clinical development process, follows cdisc ADaM standards. Additionally, functions data-type sensitive give informative summaries proper data-type present. following changes necessary: per ADaM guidelines, event indicated 0 censoring indicated >0. data use, 2 stands event 1 stands censoring. Therefore, censoring values adjusted. column Age_Cat parsed integer Sex character. Converting factor result informative output. Furthermore, Age_Cat encoded numerical value 1-3. adding respective names categories, output readable.","code":"# 1. Adjust censoring data$Status = abs(data$Status - 2)  # 2. Convert to factors and add the age categories data = data %>%    dplyr::mutate(      Age_Cat = recode_factor(Age_Cat,                              `1` = \"<18yr\", `2` =\"18yr-60yr\", `3` = \">60yr\"),      Sex     = as.factor(Sex))  data"},{"path":"https://openpharma.github.io/visR/articles/interactive_tte_tutorial/tte_tutorial.html","id":"section-live-demo","dir":"Articles > Interactive_tte_tutorial","previous_headings":"The study and the data","what":"Live Demo","title":"visR","text":"","code":"# Live demo"},{"path":"https://openpharma.github.io/visR/articles/interactive_tte_tutorial/tte_tutorial.html","id":"section-generation-of-summary-tables","dir":"Articles > Interactive_tte_tutorial","previous_headings":"","what":"Generation of summary tables","title":"visR","text":"typical clinical report contains demography table, detailing distribution patients across different arms clinical trial. Commonly reported variables age, sex baseline disease characteristics. table sometimes referred Table 1. visR provides set functions generate render tables. rendering, visR enforces specification data source title. functions demonstrated demonstrated . default, table generated whole population stratifier can defined. Exercise 1: Generate table using Sex stratifier. Exercise 2: Generate table using Sex Age_Cat stratifier. Exercise 3: Add additional footnote table.","code":"# Define meta-data DATASOURCE = \"https://github.com/vntkumar8/covid-survival\" TITLE = \"Indian Covid Data\"  data %>% tableone(title = TITLE, datasource = DATASOURCE) # Have fun!"},{"path":"https://openpharma.github.io/visR/articles/interactive_tte_tutorial/tte_tutorial.html","id":"section-note","dir":"Articles > Interactive_tte_tutorial","previous_headings":"Generation of summary tables","what":"Note","title":"visR","text":"notice tables contain NAs stratifier split . workaround first get table 1 data.frame, remove stratifier, render . examples demonstrates modular built compatibility visR. tableone command actually wrapper around functions get_tableone builds data.frame summary statistics render command displays nicely. (fixed upcoming release.)","code":"data %>%    get_tableone(strata = c(\"Sex\", \"Age_Cat\")) %>%    filter(variable != \"Sex\" & variable != \"Age_Cat\") %>%    render(title = TITLE, datasource = DATASOURCE)"},{"path":"https://openpharma.github.io/visR/articles/interactive_tte_tutorial/tte_tutorial.html","id":"section-fitting-survival-models","dir":"Articles > Interactive_tte_tutorial","previous_headings":"","what":"Fitting survival models","title":"visR","text":"mentioned, visR defaults following CDISC ADaM standard. data set uses well, estimating plotting survival curves particularly straightforward.","code":"# The dataset that comes with visR is cdisc ADaM compliant  mod = visR::adtte %>% estimate_KM()   # When no strata is specified, the overall patient cohort is analysed mod  mod %>% visr()"},{"path":"https://openpharma.github.io/visR/articles/interactive_tte_tutorial/tte_tutorial.html","id":"section-survival-analysis-of-the-indian-covid-data","dir":"Articles > Interactive_tte_tutorial","previous_headings":"Fitting survival models","what":"Survival analysis of the Indian COVID data","title":"visR","text":"Since ADaM standards utilized beyond clinical trial analysis reporting,, functions visR parameters allowing specification respective column names without modifying actual data. model estimated, different summary statistics easy get_ Exercise 1: Calculate quantiles model.","code":"mod = data %>% estimate_KM(strata = \"Sex\", CNSR = \"Status\", AVAL = \"Stay\") mod mod %>% get_pvalue() # Have fun!"},{"path":"https://openpharma.github.io/visR/articles/interactive_tte_tutorial/tte_tutorial.html","id":"section-plotting-survival-models","dir":"Articles > Interactive_tte_tutorial","previous_headings":"","what":"Plotting survival models","title":"visR","text":"survival models can easily plotted using visR. visR function provides several convenient functions adjust aesthetics plot. Exercise 1: Change stratifier survival model Age_Cat. Exercise 2: Plot new model.","code":"mod %>% visr() mod %>%   visr(legend_position = \"top\",        x_label = \"\") mod %>%   visr(legend_position = \"top\",        x_units = \"years\") mod %>%   visr(legend_position = \"top\",        fun = \"log\") # Have fun!"},{"path":"https://openpharma.github.io/visR/articles/interactive_tte_tutorial/tte_tutorial.html","id":"section-improving-survival-plots","dir":"Articles > Interactive_tte_tutorial","previous_headings":"Plotting survival models","what":"Improving survival plots","title":"visR","text":"top , visR provides several functions improve plots. , example, easy add confidence intervals censoring markers. Exercise 1: Add markers censoring. (Hint: functions adding statistics plot visR usually start add_). Also, function provided annotate plot additional information. Exercise 1: Add information statistical significance tests survival plot. (Hint: Combine add_annotation() get_pvalue()).","code":"mod %>%   visr() %>%   add_CI() # Have fun! mod %>%   visr() %>%   visR::add_annotation(label = \"Hello world\", xmin = 0, ymin = 0.5) # Have fun!"},{"path":"https://openpharma.github.io/visR/articles/interactive_tte_tutorial/tte_tutorial.html","id":"section-styling","dir":"Articles > Interactive_tte_tutorial","previous_headings":"Plotting survival models","what":"Styling","title":"visR","text":"Particular attention paid stay compatible ggplot2 ecosystem. Therefore, created objects can example styled like ggplot. Exercise 1: Try recreate Figure 5 Indian Covid data publication close possible using learned now. Alternatively, can create visually pleasing variant.","code":"gg = mod %>% visr()     gg + ggplot2::theme_dark() # Have fun!"},{"path":"https://openpharma.github.io/visR/articles/interactive_tte_tutorial/tte_tutorial.html","id":"section-combining-plots-with-summary-statistics","dir":"Articles > Interactive_tte_tutorial","previous_headings":"","what":"Combining plots with summary statistics","title":"visR","text":"Another good practice provide summary statistics accompany survival plot. purpose, visR provides handy function can appended normal piping framework. NOTE: breaks compatibility ggplot2 functions. Therefore, styling happen adding risktable. Analogous functions creating showing Table 1, risktables can also generated independently (using get_ function) can rendered. Exercise 1: Create render risktable survival model","code":"mod %>%   visr() %>%   add_risktable(statlist = c(\"n.risk\", \"n.event\", \"n.censor\")) # Have fun!"},{"path":"https://openpharma.github.io/visR/articles/interactive_tte_tutorial/tte_tutorial.html","id":"section-advanced-usage","dir":"Articles > Interactive_tte_tutorial","previous_headings":"","what":"Advanced usage","title":"visR","text":"demonstrate advanced options might useful cases.","code":""},{"path":"https://openpharma.github.io/visR/articles/interactive_tte_tutorial/tte_tutorial.html","id":"section-attrition","dir":"Articles > Interactive_tte_tutorial","previous_headings":"Advanced usage","what":"Attrition","title":"visR","text":"Often subgroups population analysed complete data sets need filtered according specific criteria. function get_attrition allows list filter statements explanations, can visualized table (render) plotted (visr). function apply_attrition filters data.frame.","code":"data$Patient = 1:nrow(data)   condition = \"Age_Cat != '<18yr'\"  filters = data %>% get_attrition(subject_column_name = \"Patient\",                                   criteria_descriptions = \"18 and older\",                                   criteria_conditions = condition)   filters %>% visr()  filters %>% render(title = \"Attrition Table\", datasource = DATASOURCE)  data %>% apply_attrition(condition)"},{"path":"https://openpharma.github.io/visR/articles/interactive_tte_tutorial/tte_tutorial.html","id":"section-custom-summary-functions-for-the-table-1","dir":"Articles > Interactive_tte_tutorial","previous_headings":"Advanced usage","what":"Custom summary functions for the Table 1","title":"visR","text":"tableone function accepts custom functions run columns. purpose, different possible data-type considered. simplicity, behaviour numeric columns changed example .","code":"# This is basically the default function but doesn't return the missing values. my_func = function(x) {      if (is.numeric(x)) {        dat = list(       `Mean (SD)` = paste0(format(mean(x, na.rm = TRUE), digits = 3),                             \" (\",                             format(sd(x, na.rm = TRUE), digits = 3),                             \")\"),       `Median (IQR)` = paste0(format(median(x, na.rm = TRUE), digits = 3),                                \" (\",                                format(quantile(x, probs=0.25, na.rm = TRUE), digits = 3),                               \"-\",                                format(quantile(x, probs=0.75, na.rm = TRUE), digits = 3),                                \")\"),       `Min-max` = paste0(format(min(x, na.rm = TRUE), digits = 3),                           \"-\", format(max(x, na.rm = TRUE), digits = 3))     )          list(dat)        } else {          visR::summarize_short(x)        } }  data %>%    get_tableone(strata = c(\"Sex\", \"Age_Cat\"), summary_function = my_func) %>%    filter(variable != \"Sex\" & variable != \"Age_Cat\") %>%    render(title = TITLE, datasource = DATASOURCE)"},{"path":"https://openpharma.github.io/visR/articles/interactive_tte_tutorial/tte_tutorial.html","id":"section-different-rendering-engines-for-table-output","dir":"Articles > Interactive_tte_tutorial","previous_headings":"Advanced usage","what":"Different rendering engines for table output","title":"visR","text":"default, tables rendered gt. However, options like example kable dt also implemented.","code":"mod %>%    get_pvalue() %>%    render(title = TITLE,           datasource = DATASOURCE,           engine = \"kable\") # dt launches a child process which crashes on shinyapps.io?"},{"path":"https://openpharma.github.io/visR/articles/interactive_tte_tutorial/tte_tutorial.html","id":"section-possible-solution-to-the-exercise-for-recreating-figure-5","dir":"Articles > Interactive_tte_tutorial","previous_headings":"Advanced usage","what":"Possible solution to the exercise for recreating figure 5","title":"visR","text":"library(\"learnr\") library(\"visR\") library(\"ggplot2\") library(\"dplyr\") tutorial_options(exercise.timelimit = 120)  # prep work one chunk well can always reference one  # \"exercise-setup\" chunk data = read.csv(\"https://raw.githubusercontent.com/vntkumar8/covid-survival/main/data/final.csv\") data$Status = abs(data$Status - 2) data = data %>%    dplyr::mutate(      Age_Cat = recode_factor(Age_Cat,                              `1` = \"<18yr\", `2` =\"18yr-60yr\", `3` = \">60yr\"),      Sex     = .factor(Sex)) DATASOURCE = \"https://github.com/vntkumar8/covid-survival\" TITLE = \"Indian Covid Data\" mod = data %>% estimate_KM(strata = \"Sex\", CNSR = \"Status\", AVAL = \"Stay\")  assign(\"data\",       data,       envir = globalenv()) assign(\"DATASOURCE\", DATASOURCE, envir = globalenv()) assign(\"TITLE\",      TITLE,      envir = globalenv()) assign(\"mod\",        mod,        envir = globalenv())  theme_set(theme_bw())   learnr:::register_http_handlers(session, metadata = NULL)  session$onSessionEnded(function() {         learnr:::session_stop_event(session)       })  `tutorial-exercise-load-data-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-load-data-code-editor`)), session) output$`tutorial-exercise-load-data-output` <- renderUI({   `tutorial-exercise-load-data-result`() })  `tutorial-exercise-prepare-data-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-prepare-data-code-editor`)), session) output$`tutorial-exercise-prepare-data-output` <- renderUI({   `tutorial-exercise-prepare-data-result`() })  `tutorial-exercise-live-demo-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-live-demo-code-editor`)), session) output$`tutorial-exercise-live-demo-output` <- renderUI({   `tutorial-exercise-live-demo-result`() })  `tutorial-exercise-basic-tableone-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-basic-tableone-code-editor`)), session) output$`tutorial-exercise-basic-tableone-output` <- renderUI({   `tutorial-exercise-basic-tableone-result`() })  `tutorial-exercise-survival-plot-exercise-1-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-survival-plot-exercise-1-code-editor`)), session) output$`tutorial-exercise-survival-plot-exercise-1-output` <- renderUI({   `tutorial-exercise-survival-plot-exercise-1-result`() })  `tutorial-exercise-fixed-tableone-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-fixed-tableone-code-editor`)), session) output$`tutorial-exercise-fixed-tableone-output` <- renderUI({   `tutorial-exercise-fixed-tableone-result`() })  `tutorial-exercise-cdisc-survival-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-cdisc-survival-code-editor`)), session) output$`tutorial-exercise-cdisc-survival-output` <- renderUI({   `tutorial-exercise-cdisc-survival-result`() })  `tutorial-exercise-indian-survival-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-indian-survival-code-editor`)), session) output$`tutorial-exercise-indian-survival-output` <- renderUI({   `tutorial-exercise-indian-survival-result`() })  `tutorial-exercise-get_pvalue-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-get_pvalue-code-editor`)), session) output$`tutorial-exercise-get_pvalue-output` <- renderUI({   `tutorial-exercise-get_pvalue-result`() })  `tutorial-exercise-survival-plot-exercise_1-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-survival-plot-exercise_1-code-editor`)), session) output$`tutorial-exercise-survival-plot-exercise_1-output` <- renderUI({   `tutorial-exercise-survival-plot-exercise_1-result`() })  `tutorial-exercise-basic-survival-plot-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-basic-survival-plot-code-editor`)), session) output$`tutorial-exercise-basic-survival-plot-output` <- renderUI({   `tutorial-exercise-basic-survival-plot-result`() })  `tutorial-exercise-basic-survival-plot-options-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-basic-survival-plot-options-code-editor`)), session) output$`tutorial-exercise-basic-survival-plot-options-output` <- renderUI({   `tutorial-exercise-basic-survival-plot-options-result`() })  `tutorial-exercise-survival-plot-exercise-3-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-survival-plot-exercise-3-code-editor`)), session) output$`tutorial-exercise-survival-plot-exercise-3-output` <- renderUI({   `tutorial-exercise-survival-plot-exercise-3-result`() })  `tutorial-exercise-survival-plot-add-x-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-survival-plot-add-x-code-editor`)), session) output$`tutorial-exercise-survival-plot-add-x-output` <- renderUI({   `tutorial-exercise-survival-plot-add-x-result`() })  `tutorial-exercise-survival-plot-exercise-4-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-survival-plot-exercise-4-code-editor`)), session) output$`tutorial-exercise-survival-plot-exercise-4-output` <- renderUI({   `tutorial-exercise-survival-plot-exercise-4-result`() })  `tutorial-exercise-survival-plot-annotate-basic-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-survival-plot-annotate-basic-code-editor`)), session) output$`tutorial-exercise-survival-plot-annotate-basic-output` <- renderUI({   `tutorial-exercise-survival-plot-annotate-basic-result`() })  `tutorial-exercise-survival-plot-exercise-5-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-survival-plot-exercise-5-code-editor`)), session) output$`tutorial-exercise-survival-plot-exercise-5-output` <- renderUI({   `tutorial-exercise-survival-plot-exercise-5-result`() })  `tutorial-exercise-survival-plot-style-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-survival-plot-style-code-editor`)), session) output$`tutorial-exercise-survival-plot-style-output` <- renderUI({   `tutorial-exercise-survival-plot-style-result`() })  `tutorial-exercise-survival-plot-exercise-6-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-survival-plot-exercise-6-code-editor`)), session) output$`tutorial-exercise-survival-plot-exercise-6-output` <- renderUI({   `tutorial-exercise-survival-plot-exercise-6-result`() })  `tutorial-exercise-survival-plot-risktable-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-survival-plot-risktable-code-editor`)), session) output$`tutorial-exercise-survival-plot-risktable-output` <- renderUI({   `tutorial-exercise-survival-plot-risktable-result`() })  `tutorial-exercise-survival-plot-exercise-7-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-survival-plot-exercise-7-code-editor`)), session) output$`tutorial-exercise-survival-plot-exercise-7-output` <- renderUI({   `tutorial-exercise-survival-plot-exercise-7-result`() })  `tutorial-exercise-basic-attrition-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-basic-attrition-code-editor`)), session) output$`tutorial-exercise-basic-attrition-output` <- renderUI({   `tutorial-exercise-basic-attrition-result`() })  `tutorial-exercise-custom-func-tableone-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-custom-func-tableone-code-editor`)), session) output$`tutorial-exercise-custom-func-tableone-output` <- renderUI({   `tutorial-exercise-custom-func-tableone-result`() })  `tutorial-exercise-rendering-engines-dt-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-rendering-engines-dt-code-editor`)), session) output$`tutorial-exercise-rendering-engines-dt-output` <- renderUI({   `tutorial-exercise-rendering-engines-dt-result`() })  `tutorial-exercise-solution-figure5-result` <- learnr:::setup_exercise_handler(reactive(req(input$`tutorial-exercise-solution-figure5-code-editor`)), session) output$`tutorial-exercise-solution-figure5-output` <- renderUI({   `tutorial-exercise-solution-figure5-result`() })","code":"m = data %>% estimate_KM(strata = c(\"Sex\", \"Age_Cat\"),                          CNSR = \"Status\",                           AVAL = \"Stay\")  half_surv_df = m %>%    get_quantile(probs = 0.5) %>%    dplyr::filter(quantity == \"quantile\") %>%   dplyr::mutate(pos1 = `50`, pos2 = 0.5) %>%   dplyr::select(-c(quantity, `50`))    half_surv_df_horizontal = half_surv_df %>% dplyr::mutate(pos1 = 0)    half_surv_df_vertical = half_surv_df %>% dplyr::mutate(pos2 = 0)    half_surv_df = rbind(half_surv_df, half_surv_df_horizontal, half_surv_df_vertical)      m %>%   visr() %>%   add_CI() %>%   add_CNSR() +   ggplot2::geom_line(data = half_surv_df, ggplot2::aes(pos1, pos2, group = strata), linetype = \"dashed\")"},{"path":"https://openpharma.github.io/visR/articles/Styling_KM_plots.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Styling survival plots","text":"tutorial illustrates usage styling function visR provides. default, visR::visr() apply form visual changes generated survival plots. Therefore, default output looks like expect standard ggplot2::ggplot() plot. examples visualize results estimate_KM(), principles apply competing risks cumulative incidence objects created estimate_cuminc() well.","code":"library(visR)"},{"path":"https://openpharma.github.io/visR/articles/Styling_KM_plots.html","id":"preparation-of-the-data","dir":"Articles","previous_headings":"Introduction","what":"Preparation of the data","title":"Styling survival plots","text":"example, work patient data NCCTG Lung Cancer dataset part survival package. data also used demonstrate functions visR another vignette. However, particular one, used demonstrate adjustments aesthetics.","code":""},{"path":"https://openpharma.github.io/visR/articles/Styling_KM_plots.html","id":"generation-of-a-survfit-object","dir":"Articles","previous_headings":"Introduction","what":"Generation of a survfit object","title":"Styling survival plots","text":"","code":"lung_cohort <- survival::lung  lung_cohort <- lung_cohort %>%     dplyr::mutate(sex = as.factor(ifelse(sex == 1, \"Male\", \"Female\")))  %>%     dplyr::mutate(status = status - 1) %>%   dplyr::rename(Age = \"age\", Sex = \"sex\", Status = \"status\", Days = \"time\")   lung_suvival_object <- lung_cohort %>%   visR::estimate_KM(strata = \"Sex\", CNSR = \"Status\", AVAL = \"Days\")"},{"path":[]},{"path":"https://openpharma.github.io/visR/articles/Styling_KM_plots.html","id":"plotting-the-generated-survfit-object-without-adjustments","dir":"Articles","previous_headings":"Styling","what":"Plotting the generated survfit object without adjustments","title":"Styling survival plots","text":"can, plot shows default ggplot2::theme_grey() style grey background, visible grid default ggplot2 colours.","code":"p <- lung_suvival_object %>%   visR::visr() p"},{"path":"https://openpharma.github.io/visR/articles/Styling_KM_plots.html","id":"using-ggplot2-to-style-the-plot","dir":"Articles","previous_headings":"Styling","what":"Using ggplot2 to style the plot","title":"Styling survival plots","text":"Since visR::visr() also generates valid ggplot object output, can use conventional styling logic options ggplot2 provides, shown .  However, visR also provides functions adjust common aesthetics easily less code.","code":"p +   ggplot2::theme_bw() +   ggplot2::theme(legend.position = \"top\") +   ggplot2::scale_color_manual(values = c(\"red\", \"blue\"))"},{"path":"https://openpharma.github.io/visR/articles/Styling_KM_plots.html","id":"using-visr-to-style-the-plot","dir":"Articles","previous_headings":"Styling","what":"Using visR to style the plot","title":"Styling survival plots","text":"direct option style plots generated visR::visr() using parameters function provides. Internally, parameters like y-axis label automatically deducted used function. following example demonstrates options exposed.  However, rather minimal adjustments usually don’t cover things user wants modify. Therefore, provide two additional functions adjust aesthetics: visR::define_theme() visR::apply_theme(). first one provides easy wrapper create nested list list styling options applied plot second function.","code":"lung_suvival_object %>%   visR::visr(x_label = \"Time\",              y_label = NULL, # NULL (default) causes the label to be deducted from the used function              x_ticks = seq(0, 1200, 200),              y_ticks = seq(0, 100, 20),              fun = \"pct\",              legend_position = \"top\")"},{"path":[]},{"path":"https://openpharma.github.io/visR/articles/Styling_KM_plots.html","id":"defining-a-visr_theme-using-visrdefine_theme","dir":"Articles","previous_headings":"New themes","what":"Defining a visR_theme using visR::define_theme()","title":"Styling survival plots","text":"options provided visR::define_theme(), nonetheless returns minimal list reasonable defaults. However, function also takes several styling options. currently usable ones displayed . One particular use mind writing function , wanted option define different colours strata worry present.","code":"visR::define_theme()  #> $fontfamily #> [1] \"Helvetica\" #>  #> $grid #> [1] FALSE #>  #> $bg #> [1] \"transparent\" #>  #> attr(,\"class\") #> [1] \"visR_theme\" \"list\" theme <-   visR::define_theme(     strata = list(       \"Sex\" = list(\"Female\" = \"red\",                    \"Male\" = \"blue\"),       \"ph.ecog\" = list(\"0\" = \"cyan\",                        \"1\" = \"purple\",                        \"2\" = \"brown\")     ),     fontsizes = list(       \"axis\" = 12,       \"ticks\" = 10,       \"legend_title\" = 10,       \"legend_text\" = 8     ),     fontfamily = \"Helvetica\",     grid = list(\"major\" = FALSE,                 \"minor\" = FALSE),     #grid = TRUE/FALSE # <- can also be used instead of the named list above     bg = \"transparent\",     legend_position = \"top\"   )"},{"path":"https://openpharma.github.io/visR/articles/Styling_KM_plots.html","id":"apply-styling-using-visrapply_theme","dir":"Articles","previous_headings":"New themes","what":"Apply styling using visR::apply_theme()","title":"Styling survival plots","text":"visR::apply_theme() function exposes user two ways style plot. direct one just apply function plot without specifying options. applies several reasonable defaults plot.  second one apply nested list lists , ideally generated visR::define_theme() plot. serves purpose generate detailed visR_theme object apply one several plots single line. lists also easily saved shared. usage theme generated shown .","code":"lung_suvival_object %>%   visR::visr() %>%   visR::apply_theme() lung_suvival_object %>%   visR::visr() %>%   visR::apply_theme(theme)"},{"path":"https://openpharma.github.io/visR/articles/Time_to_event_analysis.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Survival Analysis with visR","text":"tutorial illustrates typical use case clinical development - analysis time certain event (e.g., death) different groups. Typically, data obtained randomized clinical trials (RCT) can used estimate overall survival patients one group (e.g., treated drug X) vs another group (e.g., treated drug Y) thus determine treatment difference. thorough introduction Survival Analysis, recommend following tutorial. example, work patient data NCCTG Lung Cancer dataset part survival package. Another vignette presents example using data set following CDISC ADaM standard.","code":"library(ggplot2) library(visR)"},{"path":"https://openpharma.github.io/visR/articles/Time_to_event_analysis.html","id":"global-document-setup","dir":"Articles","previous_headings":"","what":"Global Document Setup","title":"Survival Analysis with visR","text":"","code":"# Metadata Title DATASET <- paste0(\"NCCTG Lung Cancer Dataset (from survival package \",                    packageVersion(\"survival\"), \")\")  # Save original options() old <- options()    # Global formatting options options(digits = 3)  # Global ggplot settings theme_set(theme_bw())  # Global table settings  options(DT.options = list(pageLength = 10,                            language = list(search = 'Filter:'),                            scrollX = TRUE))  lung_cohort <- survival::lung  # Change gender to be a factor and rename some variables to make output look nicer lung_cohort <- lung_cohort %>%     dplyr::mutate(sex = as.factor(ifelse(sex == 1, \"Male\", \"Female\")))  %>%     dplyr::rename(Age = \"age\", Sex = \"sex\", Status = \"status\", Days = \"time\")  # Restore original options() options(old)"},{"path":"https://openpharma.github.io/visR/articles/Time_to_event_analysis.html","id":"cohort-overview-table-one","dir":"Articles","previous_headings":"","what":"Cohort Overview (Table one)","title":"Survival Analysis with visR","text":"Visualizing tables, like table one risk tables, two-step process visR . First, data.frame (tibble) created get_XXX() function (e.g. get_tableone()). Secondly, data.frame can displayed calling function render(). advantage process data summaries can created, used adjusted throughout analysis, every step data summaries can displayed even downloaded. Populations usually displayed -called table one. Function get_tableone creates tibble includes populations summaries. Function render nicely displays tableone. Additionally, visR includes wrapper function create display tableone one function call. Creating visualizing tableone default settings simple can done one line code. However, customization options. get wrapper functions, stratifier can defined column displaying total information can removed. visR’s render supports three different rendering engines flexible possible. default, render uses gt. Additional engines datatable (dt) include easy downloading options… …kable flexible displaying various output formats (html default, latex supported). Overview Lung Cancer patients Called html output format, html view displayed; called latex string containing latex code printed.","code":"# Select variables of interest and change names to look nicer lung_cohort_tab1 <- lung_cohort %>%     dplyr::select(Age, Sex)   # Create a table one tab1 <- visR::get_tableone(lung_cohort_tab1)  # Render the tableone visR::render(tab1, title = \"Overview over Lung Cancer patients\", datasource = DATASET) # Use wrapper functionality to create and display a tableone visR::tableone(lung_cohort_tab1, title = \"Overview over Lung Cancer patients\", datasource = DATASET) # Create and render a tableone with a stratifier and without displaying the total visR::tableone(lung_cohort_tab1, strata = \"Sex\", overall = FALSE,                title = \"Overview over Lung Cancer patients\", datasource = DATASET) # Create and render a tableone with with dt as an engine visR::tableone(lung_cohort_tab1, strata = \"Sex\", overall = FALSE,                title = \"Overview over Lung Cancer patients\", datasource = DATASET,                 engine = \"dt\") # Create and render a tableone with with kable as an engine and html as output format visR::tableone(lung_cohort_tab1, strata = \"Sex\", overall = FALSE,                 title = \"Overview over Lung Cancer patients\", datasource = DATASET,                 engine = \"kable\", output_format=\"html\")"},{"path":[]},{"path":"https://openpharma.github.io/visR/articles/Time_to_event_analysis.html","id":"survival-estimation","dir":"Articles","previous_headings":"Time-to-event analysis","what":"Survival estimation","title":"Survival Analysis with visR","text":"visR provides wrapper function estimate Kaplan-Meier curve several functions visualize results. wrapper function compatible %>% purrr::map functions without losing traceability dataset name.","code":"# Select variables of interest and change names to look nicer lung_cohort_survival <- lung_cohort %>%     dplyr::select(Age, Sex, Status, Days)    # For the survival estimate, the censor must be 0 or 1 lung_cohort_survival$Status <- lung_cohort_survival$Status - 1  # Estimate the survival curve lung_suvival_object <- lung_cohort_survival %>%    visR::estimate_KM(strata = \"Sex\", CNSR = \"Status\", AVAL = \"Days\") lung_suvival_object #> Call: ~survival::survfit(formula = survival::Surv(Days, 1 - Status) ~  #>     Sex, data = data) #>  #>              n events median 0.95LCL 0.95UCL #> Sex=Female  90     37    529     376      NA #> Sex=Male   138     26    840     806      NA"},{"path":"https://openpharma.github.io/visR/articles/Time_to_event_analysis.html","id":"survival-visualization","dir":"Articles","previous_headings":"Time-to-event analysis","what":"Survival visualization","title":"Survival Analysis with visR","text":"two frequently used ways estimate time--event data: risk table Kaplan-Meier curve. principle, visR allows either visualize risk table Kaplan-Meier curve separately, together one plot.","code":""},{"path":"https://openpharma.github.io/visR/articles/Time_to_event_analysis.html","id":"displaying-the-risktable","dir":"Articles","previous_headings":"Time-to-event analysis > Survival visualization","what":"Displaying the risktable","title":"Survival Analysis with visR","text":"Creating visualizing risk table separately works exact way tableone (): First, get_risktable() creates tibble risk information can still changed. Secondly, risk table can rendered displayed. risktable one piece information can extracted survival object get_XXX rendered.","code":"# Create a risktable rt <- visR::get_risktable(lung_suvival_object)  # Display the risktable visR::render(rt, title = \"Overview over survival rates of Lung Cancer patients\", datasource = DATASET) # Display a summary of the survival estimate visR::render(lung_suvival_object %>% visR::get_summary(), title = \"Summary\", datasource = DATASET) # Display test statistics associated with the survival estimate visR::render(lung_suvival_object %>% visR::get_pvalue(), title = \"P-values\", datasource = DATASET) # Display qunatile information of the survival estimate visR::render(lung_suvival_object %>% visR::get_quantile(), title = \"Quantile Information\", datasource = DATASET) # Display a cox model estimate associated with the survival estimate visR::render(lung_suvival_object %>% visR::get_COX_HR(), title = \"COX estimate\", datasource = DATASET) #> tidyme S3 default method (broom::tidy) used."},{"path":"https://openpharma.github.io/visR/articles/Time_to_event_analysis.html","id":"plotting-the-kaplan-meier","dir":"Articles","previous_headings":"Time-to-event analysis > Survival visualization","what":"Plotting the Kaplan-Meier","title":"Survival Analysis with visR","text":"Alternatively, survival data can plotted Kaplan-Meier curve. visR, plot cases ggplot object adapting plot follows general principle creating plot adding visual contents step--step.    visR includes wrapper function create risktable add directly Kaplan-Meier plot.","code":"# Create and display a Kaplan-Meier from the survival object gg <- visR::visr(lung_suvival_object) gg # Add a confidence interval to the Kaplan-Meier and display the plot gg %>% visR::add_CI() # Add a confidence interval and the censor ticks to the Kaplan-Meier and display the plot gg %>% visR::add_CI() %>% visR::add_CNSR(shape = 3, size = 2) # Add a confidence interval and the censor ticks and a risktable to the Kaplan-Meier and display the plot gg %>% visR::add_CI() %>% visR::add_CNSR(shape = 3, size = 2) %>% visR::add_risktable()"},{"path":"https://openpharma.github.io/visR/articles/Time_to_event_analysis.html","id":"competing-risks","dir":"Articles","previous_headings":"","what":"Competing Risks","title":"Survival Analysis with visR","text":"addition classic right-censored data, {visR} package supports estimation time--event outcomes presence competing events. package wraps {tidycmprsk} package, exports functions cumulative incidence estimation visualization. function estimate_cuminc() estimates cumulative incidence competing event outcome interest. syntax nearly identical estimate_KM(); however, outcome status variable (passed CNSR= argument) must factor first level indicates censoring, second level competing event interest, subsequent levels competing events. Visualization functions, visr(), add_CI(), add_CNSR(), add_risktable() share syntax Kaplan-Meier variants.","code":"visR::estimate_cuminc(   tidycmprsk::trial,   strata = \"trt\",   CNSR = \"death_cr\",   AVAL = \"ttdeath\" ) %>%   visR::visr(     legend_position = \"bottom\",      x_label = \"Months from Treatment\",     y_label = \"Risk of Death\"   ) %>%   visR::add_CI() %>%   visR::add_risktable(statlist = c(\"n.risk\", \"cum.event\"))"},{"path":"https://openpharma.github.io/visR/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mark Baillie. Author, maintainer, copyright holder. Diego Saldana. Author. Charlotta Fruechtenicht. Author. Marc Vandemeulebroecke. Author. Thanos Siadimas. Author. Pawel Kawski. Author. Steven Haesendonckx. Author. James Black. Author. Pelagia Alexandra Papadopoulou. Author. Tim Treis. Author. Rebecca Albrecht. Author. Ardalan Mirshani. Contributor. Daniel D. Sjoberg. Author.","code":""},{"path":"https://openpharma.github.io/visR/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Baillie M, Saldana D, Fruechtenicht C, Vandemeulebroecke M, Siadimas T, Kawski P, Haesendonckx S, Black J, Alexandra Papadopoulou P, Treis T, Albrecht R, Sjoberg D (2022). visR: Clinical Graphs Tables Adhering Graphical Principles. R package version 0.3.0, https://github.com/openpharma/visR.","code":"@Manual{,   title = {visR: Clinical Graphs and Tables Adhering to Graphical Principles},   author = {Mark Baillie and Diego Saldana and Charlotta Fruechtenicht and Marc Vandemeulebroecke and Thanos Siadimas and Pawel Kawski and Steven Haesendonckx and James Black and Pelagia {Alexandra Papadopoulou} and Tim Treis and Rebecca Albrecht and Daniel D. Sjoberg},   year = {2022},   note = {R package version 0.3.0},   url = {https://github.com/openpharma/visR}, }"},{"path":"https://openpharma.github.io/visR/CODE_OF_CONDUCT.html","id":null,"dir":"","previous_headings":"","what":"Contributor Code of Conduct","title":"Contributor Code of Conduct","text":"contributors maintainers project, pledge respect people contribute reporting issues, posting feature requests, updating documentation, submitting pull requests patches, activities. committed making participation project harassment-free experience everyone, regardless level experience, gender, gender identity expression, sexual orientation, disability, personal appearance, body size, race, ethnicity, age, religion. Examples unacceptable behavior participants include use sexual language imagery, derogatory comments personal attacks, trolling, public private harassment, insults, unprofessional conduct. Project maintainers right responsibility remove, edit, reject comments, commits, code, wiki edits, issues, contributions aligned Code Conduct. Project maintainers follow Code Conduct may removed project team. Instances abusive, harassing, otherwise unacceptable behavior may reported opening issue contacting one project maintainers. Code Conduct adapted Contributor Covenant (https://www.contributor-covenant.org), version 1.0.0, available https://contributor-covenant.org/version/1/0/0/.","code":""},{"path":"https://openpharma.github.io/visR/contributing.html","id":null,"dir":"","previous_headings":"","what":"Contributing to visR","title":"Contributing to visR","text":"detailed info contributing, please see development contributing guide.","code":""},{"path":"https://openpharma.github.io/visR/contributing.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to visR","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://openpharma.github.io/visR/contributing.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to visR","text":"want make bigger contribution, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed).","code":""},{"path":"https://openpharma.github.io/visR/contributing.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to visR","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"openpharma/visR\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":[]},{"path":"https://openpharma.github.io/visR/contributing.html","id":"general-coding-principles","dir":"","previous_headings":"Code style","what":"General coding principles","title":"Contributing to visR","text":"new functions preferably built using widely adapted tidyverse (please see namespace allowed package dependencies). Dependencies kept minimum. Please don’t restyle code nothing PR. Use roxygen2, Markdown syntax, updating creating documentation. Use testthat unit tests. Contributions accompanied extensive user acceptance testing. Please reach team need help. CRAN requires us use TRUE/FALSE, don’t use T/F. Subset using ‘[[’ rather ‘$’ avoid surprises partial matching","code":""},{"path":"https://openpharma.github.io/visR/contributing.html","id":"data-manipulation","dir":"","previous_headings":"Code style","what":"Data Manipulation","title":"Contributing to visR","text":"Data expected present tidy form (one row per observation) unless otherwise noted. Dataframes, rather tibbles returned functions. magrittr pipe (%>%) can used consecutive operations data. models broom package easily converts key information models tidy data tibbles subsequent wrangling visualisation. Note implemented methods lazy extract key information, used common downstream processing. visR custom tidiers extract informtation model objects dataframe users information required downstream processing.","code":""},{"path":"https://openpharma.github.io/visR/contributing.html","id":"figures","dir":"","previous_headings":"Code style","what":"Figures","title":"Contributing to visR","text":"Plotting implemented using ggplot2 unless possible. Interactivity may provided using ggplotly - needed plotly packages.","code":""},{"path":"https://openpharma.github.io/visR/contributing.html","id":"tables","dir":"","previous_headings":"Code style","what":"Tables","title":"Contributing to visR","text":"Tables always also available raw dataframes.","code":""},{"path":"https://openpharma.github.io/visR/contributing.html","id":"testing","dir":"","previous_headings":"","what":"Testing","title":"Contributing to visR","text":"Write tests soon function somewhat usable state. Improving easier starting. Add new test every issue/bug identified. Use vdiffr comparison anything plotted library manually curated plots. Educate break: Rather just stopping parameters provided don’t make sense, like shape = NULL, warn user required argument set reasonable default.","code":""},{"path":"https://openpharma.github.io/visR/contributing.html","id":"package-maintenance","dir":"","previous_headings":"","what":"Package maintenance","title":"Contributing to visR","text":"integrated several “watchdogs” testing routine ensure adherence certain standards ’ve set. routines scan codebase possible style violations:","code":""},{"path":"https://openpharma.github.io/visR/contributing.html","id":"cran-watchdog","dir":"","previous_headings":"Package maintenance","what":"CRAN watchdog","title":"Contributing to visR","text":"successful submission CRAN, certain rules set place CRAN team, example usage TRUE/FALSE T/F. continuously ensure compliance , CRAN watchdog scans respective files violations .","code":""},{"path":"https://openpharma.github.io/visR/contributing.html","id":"validation-watchdog-in-pr","dir":"","previous_headings":"Package maintenance","what":"Validation watchdog (in PR)","title":"Contributing to visR","text":"want make easy use package stringent environment might require packages validated. Based discussions similar projects decided implement traceability testing files. Therefore, tests well last change , automatically written files potential scraping. details last change gathered usage git log table contents unit test specifications generated based strings actual tests.","code":""},{"path":"https://openpharma.github.io/visR/contributing.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to visR","text":"Please note visR project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://openpharma.github.io/visR/index.html","id":"visr-","dir":"","previous_headings":"","what":"Clinical Graphs and Tables Adhering to Graphical Principles","title":"Clinical Graphs and Tables Adhering to Graphical Principles","text":"goal visR enable fit--purpose, reusable clinical medical research focused visualizations tables sensible defaults based sound graphical principles. Package documentation","code":""},{"path":"https://openpharma.github.io/visR/index.html","id":"motivation","dir":"","previous_headings":"","what":"Motivation","title":"Clinical Graphs and Tables Adhering to Graphical Principles","text":"using common package visualising data analysis results clinical development process, want positive influence choice visualisation making easy explore different visualisation use impactful visualisations fit--purpose effective visual communication making easy implement best practices judging visualisation chose research question, want facilitate support good practice. can read philosophy architecture repo wiki.","code":""},{"path":"https://openpharma.github.io/visR/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Clinical Graphs and Tables Adhering to Graphical Principles","text":"easiest way get visR install CRAN: Install development version GitHub :","code":"install.packages(\"visR\") # defaults to develop branch devtools::install_github(\"openpharma/visR\")"},{"path":[]},{"path":"https://openpharma.github.io/visR/index.html","id":"visualization","dir":"","previous_headings":"Examples","what":"Visualization","title":"Clinical Graphs and Tables Adhering to Graphical Principles","text":"basic example demonstrate API can used add layers visualization. example demonstrates time--event analysis. example calculates plots stratified Kaplan-Meier treatment. possible add uncertainty intervals, censoring information, risk table using additional functions.","code":"library(visR) library(ggplot2)  theme_set(theme_minimal())  adtte %>%   estimate_KM(strata = \"TRTP\", conf.int = 0.90) %>%   visr(legend_position = \"right\", x_unit = \"Days\") %>%   add_CI(style = \"ribbon\") %>%   add_CNSR(shape = 3, size = 1) %>%   add_risktable(     statlist = c(\"n.risk\", \"n.event\", \"n.censor\"),     label = c(\"At risk\", \"Event\", \"Censor\")   )"},{"path":"https://openpharma.github.io/visR/index.html","id":"cite-visr","dir":"","previous_headings":"","what":"Cite visR","title":"Clinical Graphs and Tables Adhering to Graphical Principles","text":"","code":"> citation(\"visR\")"},{"path":"https://openpharma.github.io/visR/index.html","id":"contributing","dir":"","previous_headings":"","what":"Contributing","title":"Clinical Graphs and Tables Adhering to Graphical Principles","text":"Please note visR project released Contributor Code Conduct. contributing project, agree abide terms. Thank contributors: @AlexandraP-21, @ardeeshany, @bailliem, @ddsjoberg, @epijim, @gdario, @joanacmbarros, @lcomm, @prabhushanmup, @rebecca-albrecht, @SHAESEN2, @timtreis, @cschaerfe, @AlexandraP-21","code":""},{"path":"https://openpharma.github.io/visR/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2022 visR authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://openpharma.github.io/visR/reference/add_annotation.html","id":null,"dir":"Reference","previous_headings":"","what":"Add annotations to a visR object — add_annotation","title":"Add annotations to a visR object — add_annotation","text":"Wrapper around ggplot2::annotation_custom simplified annotation ggplot2 plots. function accepts string, dataframe, data.table, tibble customized objects class gtable places specified location ggplot. layout fixed: bold column headers plain body. font size type can chosen. initial plot individual annotation stored attribute component final object.","code":""},{"path":"https://openpharma.github.io/visR/reference/add_annotation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add annotations to a visR object — add_annotation","text":"","code":"add_annotation(   gg = NULL,   label = NULL,   base_family = \"sans\",   base_size = 11,   xmin = -Inf,   xmax = Inf,   ymin = -Inf,   ymax = Inf )"},{"path":"https://openpharma.github.io/visR/reference/add_annotation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add annotations to a visR object — add_annotation","text":"gg Object class ggplot. label String, dataframe, data.table, tibble used annotate ggplot. base_family character. Base font family base_size numeric. Base font size pt xmin x coordinates giving horizontal location raster fit annotation. xmax x coordinates giving horizontal location raster fit annotation. ymin y coordinates giving vertical location raster fit annotation. ymax y coordinates giving vertical location raster fit annotation.","code":""},{"path":"https://openpharma.github.io/visR/reference/add_annotation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add annotations to a visR object — add_annotation","text":"Object class ggplot added annotation object class gtable.","code":""},{"path":[]},{"path":"https://openpharma.github.io/visR/reference/add_annotation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add annotations to a visR object — add_annotation","text":"","code":"## Estimate survival surv_object <- visR::estimate_KM(data = adtte, strata = \"TRTP\")  ## We want to annotate the survival KM plot with a simple string comment visR::visr(surv_object) %>%   visR::add_annotation(     label = \"My simple comment\",     base_family = \"sans\",     base_size = 15,     xmin = 110,     xmax = 180,     ymin = 0.80   )   ## Currently, care needs to be taken on the x-y values relative ## to the plot data area. Here we are plotting outside of the data area. visR::visr(surv_object) %>%   visR::add_annotation(     label = \"My simple comment\",     base_family = \"sans\",     base_size = 15,     xmin = 210,     xmax = 380,     ymin = 1.0   )    ## We may also want to annotate a KM plot with information ## from additional tests or estimates. This example we annotate ## with p-values contained in a tibble  ## we calculate p-values for \"Equality across strata\" lbl <- visR::get_pvalue(surv_object,   statlist = c(\"test\", \"pvalue\"),   type = \"All\" )  ## display p-values lbl #>   Equality across strata p-value #> 1               Log-Rank  <0.001 #> 2               Wilcoxon  <0.001 #> 3            Tarone-Ware  <0.001  ## Now annotate survival KM plot with the p-values visR::visr(surv_object) %>%   visR::add_annotation(     label = lbl,     base_family = \"sans\",     base_size = 9,     xmin = 100,     xmax = 180,     ymin = 0.80   )"},{"path":"https://openpharma.github.io/visR/reference/add_CI.html","id":null,"dir":"Reference","previous_headings":"","what":"Add confidence interval (CI) to visR object — add_CI","title":"Add confidence interval (CI) to visR object — add_CI","text":"Method add pointwise confidence intervals object created visR S3 method. method set use pipe %>%. two options display CI's, \"ribbon\" \"step\" lines. default method available moment.","code":""},{"path":"https://openpharma.github.io/visR/reference/add_CI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add confidence interval (CI) to visR object — add_CI","text":"","code":"add_CI(gg, ...)  # S3 method for ggsurvfit add_CI(gg, alpha = 0.1, style = \"ribbon\", linetype, ...)  # S3 method for ggtidycuminc add_CI(gg, alpha = 0.1, style = \"ribbon\", linetype, ...)"},{"path":"https://openpharma.github.io/visR/reference/add_CI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add confidence interval (CI) to visR object — add_CI","text":"gg ggplot created visR ... arguments passed method modify geom_ribbon alpha aesthetic ggplot2 geom_ribbon. Default 0.1. style aesthetic ggplot2 geom_ribbon. Default \"ribbon\". alternative option \"step\" uses line display interval bounds. linetype aesthetic ggplot2 geom_ribbon.","code":""},{"path":"https://openpharma.github.io/visR/reference/add_CI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add confidence interval (CI) to visR object — add_CI","text":"Pointwise confidence interval overlayed visR ggplot","code":""},{"path":"https://openpharma.github.io/visR/reference/add_CI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add confidence interval (CI) to visR object — add_CI","text":"","code":"library(visR)  # Estimate KM curves by treatment group survfit_object <- survival::survfit(data = adtte, survival::Surv(AVAL, 1 - CNSR) ~ TRTP)  ## plot without confidence intervals (CI) p <- visR::visr(survfit_object) p   # add CI to plot with default settings p %>% add_CI()   # change transparency of CI ribbon p %>% add_CI(alpha = 0.9, style = \"ribbon\")   # plot CI as a step line instead of ribbon p %>% add_CI(alpha = 0.1, style = \"step\")   # change linetype of CI p %>% add_CI(style = \"step\", linetype = 1)"},{"path":"https://openpharma.github.io/visR/reference/add_CNSR.html","id":null,"dir":"Reference","previous_headings":"","what":"Add censoring symbols to a visR object — add_CNSR","title":"Add censoring symbols to a visR object — add_CNSR","text":"Add censoring symbols visR ggplot S3 method. S3 method adding censoring symbols visR ggplot. method set use pipe %>%. default method available moment.","code":""},{"path":"https://openpharma.github.io/visR/reference/add_CNSR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add censoring symbols to a visR object — add_CNSR","text":"","code":"add_CNSR(gg, ...)  # S3 method for ggsurvfit add_CNSR(gg, shape = 3, size = 2, ...)  # S3 method for ggtidycuminc add_CNSR(gg, shape = 3, size = 2, ...)"},{"path":"https://openpharma.github.io/visR/reference/add_CNSR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add censoring symbols to a visR object — add_CNSR","text":"gg ggplot created visR ... arguments passed method modify geom_point shape aesthetic ggplot2 geom_point. Default 3. size aesthetic ggplot2 geom_point. Default 2.","code":""},{"path":"https://openpharma.github.io/visR/reference/add_CNSR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add censoring symbols to a visR object — add_CNSR","text":"Censoring symbols overlayed visR ggplot","code":""},{"path":"https://openpharma.github.io/visR/reference/add_CNSR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add censoring symbols to a visR object — add_CNSR","text":"","code":"library(visR)  # Estimate KM curves by treatment group survfit_object <- survival::survfit(data = adtte, survival::Surv(AVAL, 1 - CNSR) ~ TRTP)  ## plot without confidence intervals p <- visR::visr(survfit_object) p   # add censoring to plot p %>% visR::add_CNSR()   # change censor symbol shape p %>% visR::add_CNSR(shape = 1)   # change size and shape p %>% visR::add_CNSR(size = 4, shape = 2)"},{"path":"https://openpharma.github.io/visR/reference/add_highlight.html","id":null,"dir":"Reference","previous_headings":"","what":"Highlight a specific strata — add_highlight","title":"Highlight a specific strata — add_highlight","text":"S3 method highlighting specific strata lowering opacity strata.","code":""},{"path":"https://openpharma.github.io/visR/reference/add_highlight.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Highlight a specific strata — add_highlight","text":"","code":"add_highlight(gg, ...)  # S3 method for ggsurvfit add_highlight(gg = NULL, strata = NULL, bg_alpha = 0.2, ...)"},{"path":"https://openpharma.github.io/visR/reference/add_highlight.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Highlight a specific strata — add_highlight","text":"gg ggplot created visR ... arguments passed method strata String representing name value strata highlighted shown legend. bg_alpha numerical value 0 1 used decrease opacity strata chosen highlighted strata. strata's existing alpha values multiplied bg_alpha decrease opacity, highlighting target strata. works colour fill properties, example present applying visR::add_CI().","code":""},{"path":"https://openpharma.github.io/visR/reference/add_highlight.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Highlight a specific strata — add_highlight","text":"input ggsurvfit object adjusted alpha values","code":""},{"path":"https://openpharma.github.io/visR/reference/add_highlight.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Highlight a specific strata — add_highlight","text":"","code":"adtte %>%   visR::estimate_KM(strata = \"SEX\") %>%   visR::visr() %>%   visR::add_CI(alpha = 0.4) %>%   visR::add_highlight(strata = \"M\", bg_alpha = 0.2)   strata <- c(\"Placebo\", \"Xanomeline Low Dose\")  adtte %>%   visR::estimate_KM(strata = \"TRTP\") %>%   visR::visr() %>%   visR::add_CI(alpha = 0.4) %>%   visR::add_highlight(strata = strata, bg_alpha = 0.2)"},{"path":"https://openpharma.github.io/visR/reference/add_quantiles.html","id":null,"dir":"Reference","previous_headings":"","what":"Add quantile indicators to visR plot — add_quantiles","title":"Add quantile indicators to visR plot — add_quantiles","text":"Method add quantile lines plot.","code":""},{"path":"https://openpharma.github.io/visR/reference/add_quantiles.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add quantile indicators to visR plot — add_quantiles","text":"","code":"add_quantiles(gg, ...)  # S3 method for ggsurvfit add_quantiles(   gg,   quantiles = 0.5,   linetype = \"dashed\",   linecolour = \"grey50\",   alpha = 1,   ... )"},{"path":"https://openpharma.github.io/visR/reference/add_quantiles.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add quantile indicators to visR plot — add_quantiles","text":"gg ggplot created visR ... arguments passed method modify geom_line quantiles vector quantiles displayed probability scale, default: 0.5 linetype string indicating linetype described aesthetics ggplot2 geom_line, default: dashed (also supports \"mixed\" -> horizontal lines solid, vertical ones dashed) linecolour string indicating linetype described aesthetics ggplot2 geom_line, default: grey, (also supports \"strata\" -> horizontal lines grey50, vertical ones colour respective strata) alpha numeric value 0 1 described aesthetics ggplot2 geom_line, default: 1","code":""},{"path":"https://openpharma.github.io/visR/reference/add_quantiles.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add quantile indicators to visR plot — add_quantiles","text":"Lines indicating quantiles overlayed visR ggplot","code":""},{"path":"https://openpharma.github.io/visR/reference/add_quantiles.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add quantile indicators to visR plot — add_quantiles","text":"","code":"library(visR)  adtte %>%   estimate_KM(\"SEX\") %>%   visr() %>%   add_quantiles()   adtte %>%   estimate_KM(\"SEX\") %>%   visr() %>%   add_quantiles(quantiles = c(0.25, 0.50))   adtte %>%   estimate_KM(\"SEX\") %>%   visr() %>%   add_quantiles(     quantiles = c(0.25, 0.50),     linetype = \"solid\",     linecolour = \"grey\"   )   adtte %>%   estimate_KM(\"SEX\") %>%   visr() %>%   add_quantiles(     quantiles = c(0.25, 0.50),     linetype = \"mixed\",     linecolour = \"strata\"   )"},{"path":"https://openpharma.github.io/visR/reference/add_risktable.html","id":null,"dir":"Reference","previous_headings":"","what":"Add risk tables to visR plots through an S3 method — add_risktable","title":"Add risk tables to visR plots through an S3 method — add_risktable","text":"S3 method adding risk tables visR plots. function following workflow: risktables calculated using get_risktable risktables placed underneath visR plots using plot_grid initial visR plot individual risktables stored attribute component final object allow post-modification individual plots desired","code":""},{"path":"https://openpharma.github.io/visR/reference/add_risktable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add risk tables to visR plots through an S3 method — add_risktable","text":"","code":"add_risktable(gg, ...)  # S3 method for ggsurvfit add_risktable(   gg,   times = NULL,   statlist = \"n.risk\",   label = NULL,   group = \"strata\",   collapse = FALSE,   rowgutter = 0.16,   ... )  # S3 method for ggtidycuminc add_risktable(   gg,   times = NULL,   statlist = \"n.risk\",   label = NULL,   group = \"strata\",   collapse = FALSE,   rowgutter = 0.16,   ... )"},{"path":"https://openpharma.github.io/visR/reference/add_risktable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add risk tables to visR plots through an S3 method — add_risktable","text":"gg visR plot class ggsurvfit ggtidycmprsk ... arguments passed method add_risktable times Numeric vector indicating times risk set, censored subjects, events calculated. statlist Character vector indicating summary data present. Current choices \"n.risk\" \"n.event\" \"n.censor\", \"cum.event\", \"cum.censor\". Default \"n.risk\". label Character vector labels statlist. Default matches \"n.risk\" \"risk\", \"n.event\" \"Events\", \"n.censor\" \"Censored\", \"cum.event\" \"Cum. Event\", \"cum.censor\" \"Cum. Censor\". group String indicating grouping variable risk tables. Current options : \"strata\": groups risk tables per stratum. label specifies label within risk table. strata levels used titles risk tables. default \"statlist\": groups risk tables per statlist. label specifies title risk table. strata levels used labeling within risk table. Default \"strata\". collapse Boolean, indicates whether present data overall. Default FALSE. rowgutter numeric relative value 0 1 indicates height used table versus height used plot, described cowplot::plot_grid(rel_heights=). default 0.16.","code":""},{"path":"https://openpharma.github.io/visR/reference/add_risktable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add risk tables to visR plots through an S3 method — add_risktable","text":"Object class ggplot added risk table.","code":""},{"path":[]},{"path":"https://openpharma.github.io/visR/reference/add_risktable.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add risk tables to visR plots through an S3 method — add_risktable","text":"","code":"## Display 2 risk tables, 1 per statlist adtte %>%   visR::estimate_KM(strata = \"TRTP\") %>%   visR::visr() %>%   visR::add_risktable(     label = c(\"Subjects at Risk\", \"Censored\"),     statlist = c(\"n.risk\", \"n.censor\", \"n.event\"),     group = \"statlist\"   )   ## Display overall risk table at selected times adtte %>%   visR::estimate_KM(strata = \"TRTP\") %>%   visR::visr() %>%   visR::add_risktable(     label = c(\"Subjects at Risk\", \"Censored\"),     statlist = c(\"n.risk\", \"n.censor\"),     collapse = TRUE,     times = c(0, 20, 40, 60)   )   ## Add risk set as specified times adtte %>%   visR::estimate_KM(strata = \"TRTP\") %>%   visR::visr() %>%   visR::add_risktable(times = c(0, 20, 40, 100, 111, 200))"},{"path":"https://openpharma.github.io/visR/reference/adtte.html","id":null,"dir":"Reference","previous_headings":"","what":"adtte - CDISC ADaM compliant time to event data set — adtte","title":"adtte - CDISC ADaM compliant time to event data set — adtte","text":"ADTTE data copied 2013 CDISC Pilot","code":""},{"path":"https://openpharma.github.io/visR/reference/adtte.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"adtte - CDISC ADaM compliant time to event data set — adtte","text":"","code":"adtte"},{"path":"https://openpharma.github.io/visR/reference/adtte.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"adtte - CDISC ADaM compliant time to event data set — adtte","text":"data frame 254 rows 26 variables: STUDYID Study Identifier SITEID Study Site Identifier USUBJID Unique Subject Identifier AGE Age AGEGR1 Pooled Age Group 1 AGEGR1N Pooled Age Group 1 (N) RACE Race RACEN Race (N) SEX Sex TRTSDT Date First Exposure Treatment TRTEDT Date Last Exposure Treatment TRTDUR Duration treatment (days) TRTP Planned Treatment TRTA Actual Treatment TRTAN Actual Treatment (N) PARAM Parameter Description PARAMCD Parameter Code AVAL Analysis Value STARTDT Time Event Origin Date Subject ADT Analysis Date CNSR Censor EVNTDESC Event Censoring Description SRCDOM Source Domain SRCVAR Source Variable SRCSEQ Source Sequence Number SAFFL Safety Population Flag","code":""},{"path":"https://openpharma.github.io/visR/reference/adtte.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"adtte - CDISC ADaM compliant time to event data set — adtte","text":"CDISC SDTM/ADAM Pilot Project. https://github.com/phuse-org/phuse-scripts/tree/master/data","code":""},{"path":"https://openpharma.github.io/visR/reference/adtte.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"adtte - CDISC ADaM compliant time to event data set — adtte","text":"","code":"data(\"adtte\")"},{"path":"https://openpharma.github.io/visR/reference/align_plots.html","id":null,"dir":"Reference","previous_headings":"","what":"Align multiple ggplot graphs, taking into account the legend — align_plots","title":"Align multiple ggplot graphs, taking into account the legend — align_plots","text":"function aligns multiple ggplot graphs making width taking account legend width.","code":""},{"path":"https://openpharma.github.io/visR/reference/align_plots.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Align multiple ggplot graphs, taking into account the legend — align_plots","text":"","code":"align_plots(pltlist)"},{"path":"https://openpharma.github.io/visR/reference/align_plots.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Align multiple ggplot graphs, taking into account the legend — align_plots","text":"pltlist list plots","code":""},{"path":"https://openpharma.github.io/visR/reference/align_plots.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Align multiple ggplot graphs, taking into account the legend — align_plots","text":"List ggplot equal width.","code":""},{"path":"https://openpharma.github.io/visR/reference/align_plots.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Align multiple ggplot graphs, taking into account the legend — align_plots","text":"https://stackoverflow.com/questions/26159495","code":""},{"path":"https://openpharma.github.io/visR/reference/align_plots.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Align multiple ggplot graphs, taking into account the legend — align_plots","text":"","code":"# \\donttest{  ## create 2 graphs p1 <- ggplot2::ggplot(adtte, ggplot2::aes(x = as.numeric(AGE), fill = \"Age\")) +   ggplot2::geom_histogram(bins = 15)  p2 <- ggplot2::ggplot(adtte, ggplot2::aes(x = as.numeric(AGE))) +   ggplot2::geom_histogram(bins = 15)  ## default alignment does not take into account legend size cowplot::plot_grid(   plotlist = list(p1, p2),   align = \"none\",   nrow = 2 )   ## align_plots() takes into account legend width cowplot::plot_grid(   plotlist = visR::align_plots(pltlist = list(p1, p2)),   align = \"none\",   nrow = 2 )  # }"},{"path":"https://openpharma.github.io/visR/reference/apply_attrition.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply list of inclusion/exclusion criteria to a patient-level dataframe — apply_attrition","title":"Apply list of inclusion/exclusion criteria to a patient-level dataframe — apply_attrition","text":"Apply list inclusion/exclusion criteria patient-level dataframe","code":""},{"path":"https://openpharma.github.io/visR/reference/apply_attrition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply list of inclusion/exclusion criteria to a patient-level dataframe — apply_attrition","text":"","code":"apply_attrition(data, criteria_conditions)"},{"path":"https://openpharma.github.io/visR/reference/apply_attrition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply list of inclusion/exclusion criteria to a patient-level dataframe — apply_attrition","text":"data data.frame. Data set filtered criteria_conditions character dplyr-filter compatible conditions filtering criteria. conditions applied filter input data set obtain final analysis data set","code":""},{"path":"https://openpharma.github.io/visR/reference/apply_attrition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply list of inclusion/exclusion criteria to a patient-level dataframe — apply_attrition","text":"Filtered data frame","code":""},{"path":"https://openpharma.github.io/visR/reference/apply_attrition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Apply list of inclusion/exclusion criteria to a patient-level dataframe — apply_attrition","text":"","code":"adtte_filtered <- visR::apply_attrition(adtte,   criteria_conditions = c(     \"TRTP=='Placebo'\", \"AGE>=75\",     \"RACE=='WHITE'\", \"SITEID==709\"   ) )"},{"path":"https://openpharma.github.io/visR/reference/apply_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Applies a theme to a ggplot object. — apply_theme","title":"Applies a theme to a ggplot object. — apply_theme","text":"Takes styling options defined visR::define_theme applies plot.","code":""},{"path":"https://openpharma.github.io/visR/reference/apply_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Applies a theme to a ggplot object. — apply_theme","text":"","code":"apply_theme(gg, visR_theme_dict = NULL)"},{"path":"https://openpharma.github.io/visR/reference/apply_theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Applies a theme to a ggplot object. — apply_theme","text":"gg object class ggplot visR_theme_dict nested list containing possible font options","code":""},{"path":"https://openpharma.github.io/visR/reference/apply_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Applies a theme to a ggplot object. — apply_theme","text":"object class ggplot","code":""},{"path":"https://openpharma.github.io/visR/reference/apply_theme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Applies a theme to a ggplot object. — apply_theme","text":"","code":"library(visR)  theme <- visR::define_theme(   strata = list(     \"SEX\" = list(       \"F\" = \"red\",       \"M\" = \"blue\"     ),     \"TRTA\" = list(       \"Placebo\" = \"cyan\",       \"Xanomeline High Dose\" = \"purple\",       \"Xanomeline Low Dose\" = \"brown\"     )   ),   fontsizes = list(     \"axis\" = 12,     \"ticks\" = 10,     \"legend_title\" = 10,     \"legend_text\" = 8   ),   fontfamily = \"Helvetica\",   grid = FALSE,   bg = \"transparent\",   legend_position = \"top\" )   gg <- adtte %>%   visR::estimate_KM(strata = \"SEX\") %>%   visR::visr() %>%   visR::apply_theme(theme) gg"},{"path":"https://openpharma.github.io/visR/reference/brca_cohort.html","id":null,"dir":"Reference","previous_headings":"","what":"Cancer survival data — brca_cohort","title":"Cancer survival data — brca_cohort","text":"Creation script data-raw","code":""},{"path":"https://openpharma.github.io/visR/reference/brca_cohort.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Cancer survival data — brca_cohort","text":"","code":"brca_cohort"},{"path":"https://openpharma.github.io/visR/reference/brca_cohort.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Cancer survival data — brca_cohort","text":"object class data.frame 1098 rows 10 columns.","code":""},{"path":"https://openpharma.github.io/visR/reference/define_theme.html","id":null,"dir":"Reference","previous_headings":"","what":"Provides a simple wrapper for themes — define_theme","title":"Provides a simple wrapper for themes — define_theme","text":"function collects several lists present. absent, reasonable defaults used. strata defined theme, default grey50 presented legend.","code":""},{"path":"https://openpharma.github.io/visR/reference/define_theme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Provides a simple wrapper for themes — define_theme","text":"","code":"define_theme(   strata = NULL,   fontsizes = NULL,   fontfamily = \"Helvetica\",   grid = FALSE,   bg = \"transparent\",   legend_position = NULL )"},{"path":"https://openpharma.github.io/visR/reference/define_theme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Provides a simple wrapper for themes — define_theme","text":"strata named list containing different strata name:colour value pairs fontsizes named list containing font sizes different options fontfamily string name supported font grid boolean specifies whether major minor grid drawn. drawing major minor gridlines can manipulated separately using boolean indicator named list elements major minor. bg string defining colour background plot legend_position string defining legend position. Valid options NULL, 'top' 'bottom' 'right' 'left'","code":""},{"path":"https://openpharma.github.io/visR/reference/define_theme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Provides a simple wrapper for themes — define_theme","text":"Nested list styling preferences ggplot object","code":""},{"path":"https://openpharma.github.io/visR/reference/define_theme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Provides a simple wrapper for themes — define_theme","text":"","code":"theme <- visR::define_theme(   strata = list(\"SEX\" = list(     \"F\" = \"red\",     \"M\" = \"blue\"   )),   fontsizes = list(     \"axis\" = 12,     \"ticks\" = 10,     \"legend_title\" = 10,     \"legend_text\" = 8   ),   fontfamily = \"Helvetica\",   grid = list(     \"major\" = FALSE,     \"minor\" = FALSE   ),   bg = \"transparent\",   legend_position = \"top\" )"},{"path":"https://openpharma.github.io/visR/reference/dot-convert_alpha.html","id":null,"dir":"Reference","previous_headings":"","what":"Converts an alpha value between its numeric and its hex-encoded form. — .convert_alpha","title":"Converts an alpha value between its numeric and its hex-encoded form. — .convert_alpha","text":"function accepts numeric (NULL/NA) two-character hex encoded alpha representation returns respective representation.","code":""},{"path":"https://openpharma.github.io/visR/reference/dot-convert_alpha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Converts an alpha value between its numeric and its hex-encoded form. — .convert_alpha","text":"","code":".convert_alpha(numeric_alpha = NULL, hex_alpha = NULL)"},{"path":"https://openpharma.github.io/visR/reference/dot-convert_alpha.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Converts an alpha value between its numeric and its hex-encoded form. — .convert_alpha","text":"numeric_alpha numerical value 0 1. hex_alpha two-letter character string.","code":""},{"path":"https://openpharma.github.io/visR/reference/dot-convert_alpha.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Converts an alpha value between its numeric and its hex-encoded form. — .convert_alpha","text":"numeric_alpha specified, two-letter representation returned. hex_alpha specified, numeric representation returned.","code":""},{"path":"https://openpharma.github.io/visR/reference/dot-get_alpha_from_hex_colour.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract the numerical alpha representation of #RRGGBBAA colour — .get_alpha_from_hex_colour","title":"Extract the numerical alpha representation of #RRGGBBAA colour — .get_alpha_from_hex_colour","text":"RGB colours can encoded hexadecimal values, example internally used ggplot2. , numerical RGB values mapped 0-255 value range two-character hex-values. yields string form '#RRGGBB'. Additionally, fourth optional block can present encoding alpha transparency colour. extends string '#RRGGBBAA'. function takes string input hex_colour, extracts 'AA' part returns numerical representation .","code":""},{"path":"https://openpharma.github.io/visR/reference/dot-get_alpha_from_hex_colour.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract the numerical alpha representation of #RRGGBBAA colour — .get_alpha_from_hex_colour","text":"","code":".get_alpha_from_hex_colour(hex_colour = NULL)"},{"path":"https://openpharma.github.io/visR/reference/dot-get_alpha_from_hex_colour.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract the numerical alpha representation of #RRGGBBAA colour — .get_alpha_from_hex_colour","text":"hex_colour string format '#RRGGBBAA'","code":""},{"path":"https://openpharma.github.io/visR/reference/dot-get_alpha_from_hex_colour.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract the numerical alpha representation of #RRGGBBAA colour — .get_alpha_from_hex_colour","text":"numeric representation colors' alpha value, rounded 2 digits.","code":""},{"path":"https://openpharma.github.io/visR/reference/dot-get_strata.html","id":null,"dir":"Reference","previous_headings":"","what":"Get strata level combinations — .get_strata","title":"Get strata level combinations — .get_strata","text":"Extracts strata level combinations survival objects without specified strata.","code":""},{"path":"https://openpharma.github.io/visR/reference/dot-get_strata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get strata level combinations — .get_strata","text":"","code":".get_strata(strata)"},{"path":"https://openpharma.github.io/visR/reference/dot-get_strata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get strata level combinations — .get_strata","text":"strata strata survival object","code":""},{"path":"https://openpharma.github.io/visR/reference/dot-get_strata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get strata level combinations — .get_strata","text":"strata level combinations survival objects without specified strata.","code":""},{"path":"https://openpharma.github.io/visR/reference/dot-replace_hex_alpha.html","id":null,"dir":"Reference","previous_headings":"","what":"Replaces the AA part of a #RRGGBBAA hex-colour. — .replace_hex_alpha","title":"Replaces the AA part of a #RRGGBBAA hex-colour. — .replace_hex_alpha","text":"RGB colours can encoded hexadecimal values, example internally used ggplot2. , numerical RGB values mapped 0-255 value range two-character hex-values. yields string form '#RRGGBB'. Additionally, fourth optional block can present encoding alpha transparency colour. extends string '#RRGGBBAA'. function takes '#RRGGBBAA' string input colour two-character hex-representation alpha value input new_alpha, replaces 'AA' part colour new_alpha returns new colour.","code":""},{"path":"https://openpharma.github.io/visR/reference/dot-replace_hex_alpha.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Replaces the AA part of a #RRGGBBAA hex-colour. — .replace_hex_alpha","text":"","code":".replace_hex_alpha(colour, new_alpha)"},{"path":"https://openpharma.github.io/visR/reference/dot-replace_hex_alpha.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Replaces the AA part of a #RRGGBBAA hex-colour. — .replace_hex_alpha","text":"colour character string format #RRGGBBAA. new_alpha two-character string new alpha value.","code":""},{"path":"https://openpharma.github.io/visR/reference/dot-replace_hex_alpha.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Replaces the AA part of a #RRGGBBAA hex-colour. — .replace_hex_alpha","text":"hex-encoded RGBA colour.","code":""},{"path":"https://openpharma.github.io/visR/reference/estimate_cuminc.html","id":null,"dir":"Reference","previous_headings":"","what":"Competing Events Cumulative Incidence — estimate_cuminc","title":"Competing Events Cumulative Incidence — estimate_cuminc","text":"Function creates cumulative incidence object using tidycmprsk::cuminc() function.","code":""},{"path":"https://openpharma.github.io/visR/reference/estimate_cuminc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Competing Events Cumulative Incidence — estimate_cuminc","text":"","code":"estimate_cuminc(   data = NULL,   strata = NULL,   CNSR = \"CNSR\",   AVAL = \"AVAL\",   conf.int = 0.95,   ... )"},{"path":"https://openpharma.github.io/visR/reference/estimate_cuminc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Competing Events Cumulative Incidence — estimate_cuminc","text":"data data frame. dataset expected one record per subject per analysis parameter. Rows missing observations included analysis removed. AVAL, CNSR, strata arguments used construct formula passed tidycmprsk::cuminc(formula=). AVAL Analysis value Time--Event analysis. Default \"AVAL\", per CDISC ADaM guiding principles. CNSR Column name indicating outcome censoring statuses. Column must factor first level indicates censoring, next level outcome interest, remaining levels competing events. Default \"CNSR\" strata Character vector, representing strata Time--Event analysis. NULL, overall analysis performed. Default NULL. conf.int Confidence internal level. Default 0.95. Parameter passed tidycmprsk::cuminc(conf.level=) ... Additional argument passed tidycmprsk::cuminc()","code":""},{"path":"https://openpharma.github.io/visR/reference/estimate_cuminc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Competing Events Cumulative Incidence — estimate_cuminc","text":"cumulative incidence object explained https://mskcc-epi-bio.github.io/tidycmprsk/reference/cuminc.html","code":""},{"path":"https://openpharma.github.io/visR/reference/estimate_cuminc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Competing Events Cumulative Incidence — estimate_cuminc","text":"","code":"cuminc <-   visR::estimate_cuminc(     data = tidycmprsk::trial,     strata = \"trt\",     CNSR = \"death_cr\",     AVAL = \"ttdeath\"   ) cuminc #>  #> ── cuminc() ──────────────────────────────────────────────────────────────────── #>  #> • Failure type \"death from cancer\" #> strata   time   n.risk   estimate   std.error   95% CI           #> Drug A   5.00   97       0.000      0.000       NA, NA           #> Drug A   10.0   94       0.020      0.014       0.004, 0.065     #> Drug A   15.0   83       0.071      0.026       0.031, 0.134     #> Drug A   20.0   61       0.173      0.039       0.106, 0.255     #> Drug B   5.00   102      0.000      0.000       NA, NA           #> Drug B   10.0   95       0.039      0.019       0.013, 0.090     #> Drug B   15.0   75       0.167      0.037       0.102, 0.246     #> Drug B   20.0   55       0.255      0.043       0.175, 0.343     #>  #> • Failure type \"death other causes\" #> strata   time   n.risk   estimate   std.error   95% CI           #> Drug A   5.00   97       0.010      0.010       0.001, 0.050     #> Drug A   10.0   94       0.020      0.014       0.004, 0.065     #> Drug A   15.0   83       0.082      0.028       0.038, 0.147     #> Drug A   20.0   61       0.204      0.041       0.131, 0.289     #> Drug B   5.00   102      0.000      0.000       NA, NA           #> Drug B   10.0   95       0.029      0.017       0.008, 0.077     #> Drug B   15.0   75       0.098      0.030       0.050, 0.165     #> Drug B   20.0   55       0.206      0.040       0.133, 0.289     #>  #> • Tests #> outcome              statistic   df     p.value     #> death from cancer    1.99        1.00   0.16        #> death other causes   0.089       1.00   0.77         cuminc %>%   visR::visr() %>%   visR::add_CI() %>%   visR::add_risktable(statlist = c(\"n.risk\", \"cum.event\"))"},{"path":"https://openpharma.github.io/visR/reference/estimate_KM.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper for Kaplan-Meier Time-to-Event analysis — estimate_KM","title":"Wrapper for Kaplan-Meier Time-to-Event analysis — estimate_KM","text":"function wrapper around survival::survfit.formula() perform Kaplan-Meier analysis, assuming right-censored data. result object class survfit can used downstream functions methods rely survfit class. function can leverage conventions controlled vocabulary CDISC ADaM ADTTE data model, also works standard, non-CDISC datasets formula argument.","code":""},{"path":"https://openpharma.github.io/visR/reference/estimate_KM.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper for Kaplan-Meier Time-to-Event analysis — estimate_KM","text":"","code":"estimate_KM(   data = NULL,   strata = NULL,   CNSR = \"CNSR\",   AVAL = \"AVAL\",   formula = NULL,   ... )"},{"path":"https://openpharma.github.io/visR/reference/estimate_KM.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper for Kaplan-Meier Time-to-Event analysis — estimate_KM","text":"data data frame. dataset expected one record per subject per analysis parameter. Rows missing observations included analysis removed. AVAL, CNSR, strata arguments used construct formula passed survival::survfit(formula=Surv(AVAL, 1-CNSR)~strata). arguments' default values follow naming conventions CDISC. AVAL Analysis value Time--Event analysis. Default \"AVAL\", per CDISC ADaM guiding principles. CNSR Censor Time--Event analysis. Default \"CNSR\", per CDISC ADaM guiding principles. expected CNSR = 1 censoring CNSR = 0 event interest. strata Character vector, representing strata Time--Event analysis. NULL, overall analysis performed. Default NULL. formula formula Surv() RHS stratifying variables LHS. Use ~1 LHS unstratified estimates. argument passed survival::survfit(formula=). argument used, arguments AVAL, CNSR, strata ignored. ... additional arguments passed ellipsis call survival::survfit.formula(...). Use ?survival::survfit.formula ?survival::survfitCI information.","code":""},{"path":"https://openpharma.github.io/visR/reference/estimate_KM.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper for Kaplan-Meier Time-to-Event analysis — estimate_KM","text":"survfit object ready downstream processing estimation visualization functions methods.","code":""},{"path":"https://openpharma.github.io/visR/reference/estimate_KM.html","id":"estimation-of-survfit-object","dir":"Reference","previous_headings":"","what":"Estimation of 'survfit' object","title":"Wrapper for Kaplan-Meier Time-to-Event analysis — estimate_KM","text":"estimate_KM() function utilizes defaults survival::survfit(): Kaplan Meier estimate estimated directly (stype = 1). cumulative hazard estimated using Nelson-Aalen estimator (ctype = 1): H.tilde = cumsum(x$n.event/x$n.risk). MLE (H.hat(t) = -log(S.hat(t))) requested. two-sided pointwise 0.95 confidence interval estimated using log transformation (conf.type = \"log\"). strata present, returned survfit object supplemented named list stratum associated label. support full traceability, data set name captured named list call captured within corresponding environment.","code":""},{"path":"https://openpharma.github.io/visR/reference/estimate_KM.html","id":"param-paramcd-and-cdisc","dir":"Reference","previous_headings":"","what":"PARAM/PARAMCD and CDISC","title":"Wrapper for Kaplan-Meier Time-to-Event analysis — estimate_KM","text":"data frame includes columns PARAM/PARAMCD (part CDISC format), function expects data filtered parameter interest.","code":""},{"path":"https://openpharma.github.io/visR/reference/estimate_KM.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Wrapper for Kaplan-Meier Time-to-Event analysis — estimate_KM","text":"https://github.com/therneau/survival","code":""},{"path":[]},{"path":"https://openpharma.github.io/visR/reference/estimate_KM.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper for Kaplan-Meier Time-to-Event analysis — estimate_KM","text":"","code":"## No stratification visR::estimate_KM(data = adtte) #> Call: ~survival::survfit(formula = survival::Surv(AVAL, 1 - CNSR) ~  #>     1, data = data) #>  #>        n events median 0.95LCL 0.95UCL #> [1,] 254    152     51      44      70  ## Stratified Kaplan-Meier analysis by `TRTP` visR::estimate_KM(data = adtte, strata = \"TRTP\") #> Call: ~survival::survfit(formula = survival::Surv(AVAL, 1 - CNSR) ~  #>     TRTP, data = data) #>  #>                            n events median 0.95LCL 0.95UCL #> TRTP=Placebo              86     29     NA      NA      NA #> TRTP=Xanomeline High Dose 84     61     36      25      47 #> TRTP=Xanomeline Low Dose  84     62     33      28      51  ## Stratified Kaplan-Meier analysis by `TRTP` and `SEX` visR::estimate_KM(data = adtte, strata = c(\"TRTP\", \"SEX\")) #> Call: ~survival::survfit(formula = survival::Surv(AVAL, 1 - CNSR) ~  #>     TRTP + SEX, data = data) #>  #>                                   n events median 0.95LCL 0.95UCL #> TRTP=Placebo, SEX=F              53     19     NA      90      NA #> TRTP=Placebo, SEX=M              33     10     NA      NA      NA #> TRTP=Xanomeline High Dose, SEX=F 40     27     46      30      70 #> TRTP=Xanomeline High Dose, SEX=M 44     34     25      20      46 #> TRTP=Xanomeline Low Dose, SEX=F  50     34     43      29     100 #> TRTP=Xanomeline Low Dose, SEX=M  34     28     27      21      51  ## Stratification with one level visR::estimate_KM(data = adtte, strata = \"PARAMCD\") #> Call: ~survival::survfit(formula = survival::Surv(AVAL, 1 - CNSR) ~  #>     PARAMCD, data = data) #>  #>        n events median 0.95LCL 0.95UCL #> [1,] 254    152     51      44      70  ## Analysis on subset of adtte visR::estimate_KM(data = adtte[adtte$SEX == \"F\", ]) #> Call: ~survival::survfit(formula = survival::Surv(AVAL, 1 - CNSR) ~  #>     1, data = data) #>  #>        n events median 0.95LCL 0.95UCL #> [1,] 143     80     64      47      96  ## Modify the default analysis by using the ellipsis visR::estimate_KM(   data = adtte, strata = NULL,   type = \"kaplan-meier\", conf.int = FALSE, timefix = TRUE ) #> Call: ~survival::survfit(formula = survival::Surv(AVAL, 1 - CNSR) ~  #>     1, data = data, timefix = TRUE, type = \"kaplan-meier\", conf.int = FALSE) #>  #>        n events median #> [1,] 254    152     51  ## Example working with non CDISC data head(survival::veteran[c(\"time\", \"status\", \"trt\")]) #>   time status trt #> 1   72      1   1 #> 2  411      1   1 #> 3  228      1   1 #> 4  126      1   1 #> 5  118      1   1 #> 6   10      1   1  # Using non-CDSIC data visR::estimate_KM(data = survival::veteran, formula = Surv(time, status) ~ trt) #> Call: ~survival::survfit(formula = Surv(time, status) ~ trt, data = data) #>  #>        n events median 0.95LCL 0.95UCL #> trt=1 69     64  103.0      59     132 #> trt=2 68     64   52.5      44      95"},{"path":"https://openpharma.github.io/visR/reference/get_attrition.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate cohort attrition table — get_attrition","title":"Generate cohort attrition table — get_attrition","text":"experimental function may developed time. function calculates subjects counts excluded included step cohort selection process.","code":""},{"path":"https://openpharma.github.io/visR/reference/get_attrition.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate cohort attrition table — get_attrition","text":"","code":"get_attrition(data, criteria_descriptions, criteria_conditions, subject_column_name)"},{"path":"https://openpharma.github.io/visR/reference/get_attrition.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate cohort attrition table — get_attrition","text":"data Dataframe. used input data count subjects meets criteria interest criteria_descriptions character contains descriptions inclusion/exclusion criteria. element vector corresponds description criterion. criteria_conditions character contains corresponding conditions criteria. conditions used table compute counts subjects. subject_column_name character column name table contains subject id.","code":""},{"path":"https://openpharma.github.io/visR/reference/get_attrition.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate cohort attrition table — get_attrition","text":"counts percentages remaining excluded subjects step cohort selection table format.","code":""},{"path":"https://openpharma.github.io/visR/reference/get_attrition.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate cohort attrition table — get_attrition","text":"criteria_descriptions criteria_conditions need length","code":""},{"path":"https://openpharma.github.io/visR/reference/get_attrition.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate cohort attrition table — get_attrition","text":"","code":"visR::get_attrition(adtte,   criteria_descriptions =     c(       \"1. Placebo Group\", \"2. Be 75 years of age or older.\",       \"3. White\", \"4. Site 709\"     ),   criteria_conditions = c(     \"TRTP=='Placebo'\", \"AGE>=75\",     \"RACE=='WHITE'\", \"SITEID==709\"   ),   subject_column_name = \"USUBJID\" ) #> # A tibble: 5 × 6 #>   Criteria       Condition `Remaining N` `Remaining %` `Excluded N` `Excluded %` #>   <chr>          <chr>             <int>         <dbl>        <int>        <dbl> #> 1 Total cohort … none                254        100               0         0    #> 2 1. Placebo Gr… TRTP=='P…            86         33.9           168        66.1  #> 3 2. Be 75 year… AGE>=75              48         18.9            38        15.0  #> 4 3. White       RACE=='W…            45         17.7             3         1.18 #> 5 4. Site 709    SITEID==…             3          1.18           42        16.5"},{"path":"https://openpharma.github.io/visR/reference/get_COX_HR.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize Hazard Ratio from a survival object using S3 method — get_COX_HR","title":"Summarize Hazard Ratio from a survival object using S3 method — get_COX_HR","text":"S3 method extracting information regarding Hazard Ratios. function allows survival object's formula updated. default method available moment.","code":""},{"path":"https://openpharma.github.io/visR/reference/get_COX_HR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize Hazard Ratio from a survival object using S3 method — get_COX_HR","text":"","code":"get_COX_HR(x, ...)  # S3 method for survfit get_COX_HR(x, update_formula = NULL, ...)"},{"path":"https://openpharma.github.io/visR/reference/get_COX_HR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize Hazard Ratio from a survival object using S3 method — get_COX_HR","text":"x object class survfit ... arguments passed method survival::coxph update_formula Template specifies update formula survfit object update.formula","code":""},{"path":"https://openpharma.github.io/visR/reference/get_COX_HR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize Hazard Ratio from a survival object using S3 method — get_COX_HR","text":"tidied object class coxph containing Hazard Ratios","code":""},{"path":[]},{"path":"https://openpharma.github.io/visR/reference/get_COX_HR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize Hazard Ratio from a survival object using S3 method — get_COX_HR","text":"","code":"## treatment effect survfit_object_trt <- visR::estimate_KM(data = adtte, strata = c(\"TRTP\")) visR::get_COX_HR(survfit_object_trt) #> tidyme S3 default method (broom::tidy) used. #>                       term estimate std.error statistic      p.value #> 1 TRTPXanomeline High Dose 1.614618 0.2332605  6.921953 4.454580e-12 #> 2  TRTPXanomeline Low Dose 1.422555 0.2295098  6.198232 5.710099e-10  ## treatment and gender effect survfit_object_trt_sex <- visR::estimate_KM(data = adtte, strata = c(\"TRTP\", \"SEX\")) visR::get_COX_HR(survfit_object_trt_sex) #> tidyme S3 default method (broom::tidy) used. #>                       term  estimate std.error statistic      p.value #> 1 TRTPXanomeline High Dose 1.6159986 0.2339757  6.906695 4.960732e-12 #> 2  TRTPXanomeline Low Dose 1.4755033 0.2317331  6.367252 1.924446e-10 #> 3                     SEXM 0.3745729 0.1651854  2.267591 2.335412e-02  ## update formula of KM estimates by treatment to include \"SEX\" for HR estimation visR::get_COX_HR(survfit_object_trt, update_formula = \". ~ . + SEX\") #> tidyme S3 default method (broom::tidy) used. #>                       term  estimate std.error statistic      p.value #> 1 TRTPXanomeline High Dose 1.6159986 0.2339757  6.906695 4.960732e-12 #> 2  TRTPXanomeline Low Dose 1.4755033 0.2317331  6.367252 1.924446e-10 #> 3                     SEXM 0.3745729 0.1651854  2.267591 2.335412e-02  ## update formula of KM estimates by treatment to include \"AGE\" for ## HR estimation with ties considered via the efron method visR::get_COX_HR(survfit_object_trt,   update_formula = \". ~ . + survival::strata(AGE)\", ties = \"efron\" ) #> Warning: Loglik converged before variable  3,7,18,36,37 ; coefficient may be infinite.  #> tidyme S3 default method (broom::tidy) used. #>                           term    estimate    std.error     statistic #> 1     TRTPXanomeline High Dose   1.5676387 2.555278e-01  6.1349054151 #> 2      TRTPXanomeline Low Dose   1.3216405 2.530283e-01  5.2232906436 #> 3  survival::strata(AGE)AGE=52 -18.1640265 5.298844e+03 -0.0034279227 #> 4  survival::strata(AGE)AGE=54  -0.2090228 1.415797e+00 -0.1476361992 #> 5  survival::strata(AGE)AGE=56  -1.6206873 1.097690e+00 -1.4764526121 #> 6  survival::strata(AGE)AGE=57  -1.1398148 1.166518e+00 -0.9771082854 #> 7  survival::strata(AGE)AGE=59 -18.1578569 3.767502e+03 -0.0048196009 #> 8  survival::strata(AGE)AGE=60  -1.3242727 1.241054e+00 -1.0670547450 #> 9  survival::strata(AGE)AGE=61  -1.4515246 1.133242e+00 -1.2808598926 #> 10 survival::strata(AGE)AGE=62  -1.4077265 1.428274e+00 -0.9856138035 #> 11 survival::strata(AGE)AGE=63  -1.7199741 1.245995e+00 -1.3804019425 #> 12 survival::strata(AGE)AGE=64  -1.4654615 1.256398e+00 -1.1663993068 #> 13 survival::strata(AGE)AGE=65  -1.8714042 1.236610e+00 -1.5133340637 #> 14 survival::strata(AGE)AGE=66  -0.7392248 1.443026e+00 -0.5122740113 #> 15 survival::strata(AGE)AGE=67  -1.7065320 1.132933e+00 -1.5062959259 #> 16 survival::strata(AGE)AGE=68  -1.5389556 1.104752e+00 -1.3930331338 #> 17 survival::strata(AGE)AGE=69  -1.1214615 1.136235e+00 -0.9869979981 #> 18 survival::strata(AGE)AGE=70 -18.2495027 2.607234e+03 -0.0069995634 #> 19 survival::strata(AGE)AGE=71  -1.3835479 1.085266e+00 -1.2748469333 #> 20 survival::strata(AGE)AGE=72  -1.5861528 1.109620e+00 -1.4294562988 #> 21 survival::strata(AGE)AGE=73  -1.3311583 1.078529e+00 -1.2342349648 #> 22 survival::strata(AGE)AGE=74  -1.8664225 1.086626e+00 -1.7176312590 #> 23 survival::strata(AGE)AGE=75  -1.0701874 1.094268e+00 -0.9779939016 #> 24 survival::strata(AGE)AGE=76  -1.5673346 1.094736e+00 -1.4317009758 #> 25 survival::strata(AGE)AGE=77  -1.6854602 1.064611e+00 -1.5831705057 #> 26 survival::strata(AGE)AGE=78  -1.3770729 1.070742e+00 -1.2860927604 #> 27 survival::strata(AGE)AGE=79  -1.4209295 1.057330e+00 -1.3438841443 #> 28 survival::strata(AGE)AGE=80  -1.0569092 1.073982e+00 -0.9841035589 #> 29 survival::strata(AGE)AGE=81  -2.4638433 1.083968e+00 -2.2729862787 #> 30 survival::strata(AGE)AGE=82  -1.9384962 1.095070e+00 -1.7702034739 #> 31 survival::strata(AGE)AGE=83  -0.9201888 1.089830e+00 -0.8443416072 #> 32 survival::strata(AGE)AGE=84  -1.4853330 1.059185e+00 -1.4023361544 #> 33 survival::strata(AGE)AGE=85  -1.5477944 1.140473e+00 -1.3571508894 #> 34 survival::strata(AGE)AGE=86  -2.2322079 1.172337e+00 -1.9040670529 #> 35 survival::strata(AGE)AGE=87  -2.6816908 1.423263e+00 -1.8841844010 #> 36 survival::strata(AGE)AGE=88 -18.7682740 2.704813e+03 -0.0069388434 #> 37 survival::strata(AGE)AGE=89 -18.1983764 1.889752e+04 -0.0009630034 #>         p.value #> 1  8.520988e-10 #> 2  1.757712e-07 #> 3  9.972649e-01 #> 4  8.826299e-01 #> 5  1.398224e-01 #> 6  3.285155e-01 #> 7  9.961545e-01 #> 8  2.859471e-01 #> 9  2.002429e-01 #> 10 3.243227e-01 #> 11 1.674629e-01 #> 12 2.434530e-01 #> 13 1.301948e-01 #> 14 6.084593e-01 #> 15 1.319912e-01 #> 16 1.636098e-01 #> 17 3.236436e-01 #> 18 9.944152e-01 #> 19 2.023634e-01 #> 20 1.528731e-01 #> 21 2.171154e-01 #> 22 8.586389e-02 #> 23 3.280773e-01 #> 24 1.522294e-01 #> 25 1.133826e-01 #> 26 1.984107e-01 #> 27 1.789859e-01 #> 28 3.250646e-01 #> 29 2.302701e-02 #> 30 7.669325e-02 #> 31 3.984785e-01 #> 32 1.608149e-01 #> 33 1.747333e-01 #> 34 5.690145e-02 #> 35 5.954004e-02 #> 36 9.944636e-01 #> 37 9.992316e-01"},{"path":"https://openpharma.github.io/visR/reference/get_pvalue.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize the test for equality across strata from a survival object using S3 method — get_pvalue","title":"Summarize the test for equality across strata from a survival object using S3 method — get_pvalue","text":"Wrapper around survival::survdiff tests null hypothesis equality across strata.","code":""},{"path":"https://openpharma.github.io/visR/reference/get_pvalue.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize the test for equality across strata from a survival object using S3 method — get_pvalue","text":"","code":"get_pvalue(   survfit_object,   ptype = \"All\",   rho = NULL,   statlist = c(\"test\", \"Chisq\", \"df\", \"pvalue\"),   ... )"},{"path":"https://openpharma.github.io/visR/reference/get_pvalue.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize the test for equality across strata from a survival object using S3 method — get_pvalue","text":"survfit_object object class survfit ptype Character vector containing type p-value desired. Current options \"Log-Rank\" \"Wilcoxon\" \"Tarone-Ware\" \"Custom\" \"\". \"Custom\" allows user specify weights Kaplan-Meier estimates using argument rho. default \"\" displaying types possible. rho specified context \"\", also custom p-value displayed. rho scalar parameter controls type test. statlist Character vector containing desired information displayed. order arguments determines order displayed final result. Default test name (\"test\"), Chi-squared test statistic (\"Chisq\"), degrees freedom (\"df\") p-value (\"pvalue\"). ... arguments passed method","code":""},{"path":"https://openpharma.github.io/visR/reference/get_pvalue.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize the test for equality across strata from a survival object using S3 method — get_pvalue","text":"data frame summary measures Test Equality Across Strata","code":""},{"path":[]},{"path":"https://openpharma.github.io/visR/reference/get_pvalue.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize the test for equality across strata from a survival object using S3 method — get_pvalue","text":"","code":"## general examples survfit_object <- visR::estimate_KM(data = adtte, strata = \"TRTP\") visR::get_pvalue(survfit_object) #>   Equality across strata  Chisq df p-value #> 1               Log-Rank 60.270  2  <0.001 #> 2               Wilcoxon 48.023  2  <0.001 #> 3            Tarone-Ware 41.850  2  <0.001 visR::get_pvalue(survfit_object, ptype = \"All\") #>   Equality across strata  Chisq df p-value #> 1               Log-Rank 60.270  2  <0.001 #> 2               Wilcoxon 48.023  2  <0.001 #> 3            Tarone-Ware 41.850  2  <0.001  ## examples to obtain specific tests visR::get_pvalue(survfit_object, ptype = \"Log-Rank\") #>   Equality across strata  Chisq df p-value #> 1               Log-Rank 60.270  2  <0.001 visR::get_pvalue(survfit_object, ptype = \"Wilcoxon\") #>   Equality across strata  Chisq df p-value #> 1               Wilcoxon 48.023  2  <0.001 visR::get_pvalue(survfit_object, ptype = \"Tarone-Ware\") #>   Equality across strata  Chisq df p-value #> 1            Tarone-Ware 41.850  2  <0.001  ## Custom example - obtain Harrington and Fleming test visR::get_pvalue(survfit_object, ptype = \"Custom\", rho = 1) #>                  Equality across strata  Chisq df p-value #> 1 Harrington and Fleming test (rho = 1) 48.023  2  <0.001  ## Get specific information and statistics visR::get_pvalue(survfit_object, ptype = \"Log-Rank\", statlist = c(\"test\", \"Chisq\", \"df\", \"pvalue\")) #>   Equality across strata  Chisq df p-value #> 1               Log-Rank 60.270  2  <0.001 visR::get_pvalue(survfit_object, ptype = \"Wilcoxon\", statlist = c(\"pvalue\")) #>   p-value #> 1  <0.001"},{"path":"https://openpharma.github.io/visR/reference/get_quantile.html","id":null,"dir":"Reference","previous_headings":"","what":"Wrapper around quantile methods — get_quantile","title":"Wrapper around quantile methods — get_quantile","text":"S3 method extracting quantiles. default method available moment.","code":""},{"path":"https://openpharma.github.io/visR/reference/get_quantile.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Wrapper around quantile methods — get_quantile","text":"","code":"get_quantile(x, ...)  # S3 method for survfit get_quantile(   x,   ...,   probs = c(0.25, 0.5, 0.75),   conf.int = TRUE,   tolerance = sqrt(.Machine$double.eps) )"},{"path":"https://openpharma.github.io/visR/reference/get_quantile.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Wrapper around quantile methods — get_quantile","text":"x object class survfit ... arguments passed method probs probabilities Default = c(0.25,0.50,0.75) conf.int lower upper confidence limits returned? tolerance tolerance checking survival curve exactly     equals one quantiles","code":""},{"path":"https://openpharma.github.io/visR/reference/get_quantile.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Wrapper around quantile methods — get_quantile","text":"data frame quantiles object","code":""},{"path":[]},{"path":"https://openpharma.github.io/visR/reference/get_quantile.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Wrapper around quantile methods — get_quantile","text":"","code":"## Kaplan-Meier estimates survfit_object <- visR::estimate_KM(data = adtte, strata = c(\"TRTP\"))  ## visR quantiles visR::get_quantile(survfit_object) #>                      strata quantity  25 50  75 #> 4              TRTP=Placebo    lower  35 NA  NA #> 1              TRTP=Placebo quantile  70 NA  NA #> 7              TRTP=Placebo    upper 177 NA  NA #> 5 TRTP=Xanomeline High Dose    lower   5 25  50 #> 2 TRTP=Xanomeline High Dose quantile  14 36  58 #> 8 TRTP=Xanomeline High Dose    upper  22 47  94 #> 6  TRTP=Xanomeline Low Dose    lower  15 28  57 #> 3  TRTP=Xanomeline Low Dose quantile  19 33  80 #> 9  TRTP=Xanomeline Low Dose    upper  27 51 126  ## survival quantiles quantile(survfit_object) #> $quantile #>                           25 50 75 #> TRTP=Placebo              70 NA NA #> TRTP=Xanomeline High Dose 14 36 58 #> TRTP=Xanomeline Low Dose  19 33 80 #>  #> $lower #>                           25 50 75 #> TRTP=Placebo              35 NA NA #> TRTP=Xanomeline High Dose  5 25 50 #> TRTP=Xanomeline Low Dose  15 28 57 #>  #> $upper #>                            25 50  75 #> TRTP=Placebo              177 NA  NA #> TRTP=Xanomeline High Dose  22 47  94 #> TRTP=Xanomeline Low Dose   27 51 126 #>"},{"path":"https://openpharma.github.io/visR/reference/get_risktable.html","id":null,"dir":"Reference","previous_headings":"","what":"Obtain risk tables for tables and plots — get_risktable","title":"Obtain risk tables for tables and plots — get_risktable","text":"Create risk table object using S3 method. Currently, default method defined.","code":""},{"path":"https://openpharma.github.io/visR/reference/get_risktable.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Obtain risk tables for tables and plots — get_risktable","text":"","code":"get_risktable(x, ...)  # S3 method for survfit get_risktable(   x,   times = NULL,   statlist = \"n.risk\",   label = NULL,   group = c(\"strata\", \"statlist\"),   collapse = FALSE,   ... )  # S3 method for tidycuminc get_risktable(   x,   times = pretty(x$tidy$time, 10),   statlist = \"n.risk\",   label = NULL,   group = c(\"strata\", \"statlist\"),   collapse = FALSE,   ... )"},{"path":"https://openpharma.github.io/visR/reference/get_risktable.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Obtain risk tables for tables and plots — get_risktable","text":"x object class survfit tidycuminc ... arguments passed method times Numeric vector indicating times risk set, censored subjects, events calculated. statlist Character vector indicating summary data present. Current choices \"n.risk\" \"n.event\" \"n.censor\", \"cum.event\", \"cum.censor\". Default \"n.risk\". label Character vector labels statlist. Default matches \"n.risk\" \"risk\", \"n.event\" \"Events\", \"n.censor\" \"Censored\", \"cum.event\" \"Cum. Event\", \"cum.censor\" \"Cum. Censor\". group String indicating grouping variable risk tables. Current options : \"strata\": groups risk tables per stratum. label specifies label within risk table. strata levels used titles risk tables. default \"statlist\": groups risk tables per statlist. label specifies title risk table. strata levels used labeling within risk table. Default \"strata\". collapse Boolean, indicates whether present data overall. Default FALSE.","code":""},{"path":"https://openpharma.github.io/visR/reference/get_risktable.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Obtain risk tables for tables and plots — get_risktable","text":"return list attributes form risk table .e. number patients risk per strata","code":""},{"path":[]},{"path":"https://openpharma.github.io/visR/reference/get_summary.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarize the descriptive statistics across strata from a survival object using S3 method — get_summary","title":"Summarize the descriptive statistics across strata from a survival object using S3 method — get_summary","text":"S3 method extracting descriptive statistics across strata. default method available moment.","code":""},{"path":"https://openpharma.github.io/visR/reference/get_summary.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarize the descriptive statistics across strata from a survival object using S3 method — get_summary","text":"","code":"get_summary(x, ...)  # S3 method for survfit get_summary(   x,   statlist = c(\"strata\", \"records\", \"events\", \"median\", \"LCL\", \"UCL\", \"CI\"),   ... )"},{"path":"https://openpharma.github.io/visR/reference/get_summary.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarize the descriptive statistics across strata from a survival object using S3 method — get_summary","text":"x object class survfit ... arguments passed method statlist Character vector containing desired information displayed. order arguments determines order displayed final result. Default strata (\"strata\"), number subjects (\"records\"), number events (\"events\"), median survival time (\"median\"), Confidence Interval (\"CI\"), Lower Confidence Limit (\"UCL\") Upper Confidence Limit (\"UCL\").","code":""},{"path":"https://openpharma.github.io/visR/reference/get_summary.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summarize the descriptive statistics across strata from a survival object using S3 method — get_summary","text":"list summary statistics survfit object data frame summary measures survfit object","code":""},{"path":"https://openpharma.github.io/visR/reference/get_summary.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarize the descriptive statistics across strata from a survival object using S3 method — get_summary","text":"","code":"survfit_object <- survival::survfit(data = adtte, survival::Surv(AVAL, 1 - CNSR) ~ TRTP) get_summary(survfit_object) #>                                              strata No. of subjects #> TRTP=Placebo                           TRTP=Placebo              86 #> TRTP=Xanomeline High Dose TRTP=Xanomeline High Dose              84 #> TRTP=Xanomeline Low Dose   TRTP=Xanomeline Low Dose              84 #>                           No. of events Median(surv.time) 0.95LCL 0.95UCL #> TRTP=Placebo                         29                NA      NA      NA #> TRTP=Xanomeline High Dose            61                36      25      47 #> TRTP=Xanomeline Low Dose             62                33      28      51 #>                            0.95CI #> TRTP=Placebo              (NA;NA) #> TRTP=Xanomeline High Dose (25;47) #> TRTP=Xanomeline Low Dose  (28;51)"},{"path":"https://openpharma.github.io/visR/reference/get_tableone.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate summary statistics — get_tableone","title":"Calculate summary statistics — get_tableone","text":"S3 method creating table summary statistics. summary statistics can used presentation tables table one baseline demography tables. summary statistics estimated conditional variable type: continuous, binary, categorical, etc. default following summary stats calculated: Numeric variables: mean, min, 25th-percentile, median, 75th-percentile, maximum, standard deviation Factor variables: proportion factor level overall dataset Default: number unique values number missing values","code":""},{"path":"https://openpharma.github.io/visR/reference/get_tableone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate summary statistics — get_tableone","text":"","code":"get_tableone(   data,   strata = NULL,   overall = TRUE,   summary_function = summarize_short )  # S3 method for default get_tableone(   data,   strata = NULL,   overall = TRUE,   summary_function = summarize_short )"},{"path":"https://openpharma.github.io/visR/reference/get_tableone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate summary statistics — get_tableone","text":"data dataset summarize dataframe tibble strata Stratifying/Grouping variable name(s) character vector. NULL, overall results returned overall TRUE, summary statistics overall dataset also calculated summary_function function defining summary statistics numeric categorical values","code":""},{"path":"https://openpharma.github.io/visR/reference/get_tableone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate summary statistics — get_tableone","text":"object class tableone. list data specified summaries input variables.","code":""},{"path":"https://openpharma.github.io/visR/reference/get_tableone.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate summary statistics — get_tableone","text":"possible provide summary function. Please loot summary inspiration.","code":""},{"path":"https://openpharma.github.io/visR/reference/get_tableone.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate summary statistics — get_tableone","text":"columns table summarized. columns shall used, please select variables prior creating summary table using dplyr::select()","code":""},{"path":"https://openpharma.github.io/visR/reference/get_tableone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate summary statistics — get_tableone","text":"","code":"# Example using the ovarian data set  survival::ovarian %>%   dplyr::select(-fustat) %>%   dplyr::mutate(     age_group = factor(       dplyr::case_when(         age <= 50 ~ \"<= 50 years\",         age <= 60 ~ \"<= 60 years\",         age <= 70 ~ \"<= 70 years\",         TRUE ~ \"> 70 years\"       )     ),     rx = factor(rx),     ecog.ps = factor(ecog.ps)   ) %>%   dplyr::select(age, age_group, everything()) %>%   visR::get_tableone() #> # A tibble: 21 × 3 #>    variable  statistic    Total            #>    <chr>     <chr>        <chr>            #>  1 Sample    N            26               #>  2 age       Mean (SD)    56.2 (10.1)      #>  3 age       Median (IQR) 56.8 (50.2-62.4) #>  4 age       Min-max      38.9-74.5        #>  5 age       Missing      0 (0%)           #>  6 age_group <= 50 years  6 (23.1%)        #>  7 age_group <= 60 years  13 (50.0%)       #>  8 age_group <= 70 years  4 (15.4%)        #>  9 age_group > 70 years   3 (11.5%)        #> 10 futime    Mean (SD)    600 (340)        #> # … with 11 more rows  # Examples using ADaM data  # display patients in an analysis set adtte %>%   dplyr::filter(SAFFL == \"Y\") %>%   dplyr::select(TRTA) %>%   visR::get_tableone() #> # A tibble: 4 × 3 #>   variable statistic            Total      #>   <chr>    <chr>                <chr>      #> 1 Sample   N                    254        #> 2 TRTA     Placebo              86 (33.9%) #> 3 TRTA     Xanomeline High Dose 84 (33.1%) #> 4 TRTA     Xanomeline Low Dose  84 (33.1%)  ## display overall summaries for demog adtte %>%   dplyr::filter(SAFFL == \"Y\") %>%   dplyr::select(AGE, AGEGR1, SEX, RACE) %>%   visR::get_tableone() #> # A tibble: 13 × 3 #>    variable statistic                        Total         #>    <chr>    <chr>                            <chr>         #>  1 Sample   N                                254           #>  2 AGE      Mean (SD)                        75.1 (8.25)   #>  3 AGE      Median (IQR)                     77 (70-81)    #>  4 AGE      Min-max                          51-89         #>  5 AGE      Missing                          0 (0%)        #>  6 AGEGR1   <65                              33 (13.0%)    #>  7 AGEGR1   >80                              77 (30.3%)    #>  8 AGEGR1   65-80                            144 (56.7%)   #>  9 SEX      F                                143 (56.3%)   #> 10 SEX      M                                111 (43.7%)   #> 11 RACE     AMERICAN INDIAN OR ALASKA NATIVE 1 (0.394%)    #> 12 RACE     BLACK OR AFRICAN AMERICAN        23 (9.055%)   #> 13 RACE     WHITE                            230 (90.551%)  ## By actual treatment adtte %>%   dplyr::filter(SAFFL == \"Y\") %>%   dplyr::select(AGE, AGEGR1, SEX, RACE, TRTA) %>%   visR::get_tableone(strata = \"TRTA\") #> # A tibble: 13 × 6 #>    variable statistic            Total Placebo `Xanomeline Hi…` `Xanomeline Lo…` #>    <chr>    <chr>                <chr> <chr>   <chr>            <chr>            #>  1 Sample   N                    254   86      84               84               #>  2 AGE      Mean (SD)            75.1… 75.2 (… 74.4 (7.89)      75.7 (8.29)      #>  3 AGE      Median (IQR)         77 (… 76 (69… 76 (70.8-80)     77.5 (71-82)     #>  4 AGE      Min-max              51-89 52-89   56-88            51-88            #>  5 AGE      Missing              0 (0… 0 (0%)  0 (0%)           0 (0%)           #>  6 AGEGR1   <65                  33 (… 14 (16… 11 (13.1%)       8 (9.52%)        #>  7 AGEGR1   >80                  77 (… 30 (34… 18 (21.4%)       29 (34.52%)      #>  8 AGEGR1   65-80                144 … 42 (48… 55 (65.5%)       47 (55.95%)      #>  9 SEX      F                    143 … 53 (61… 40 (47.6%)       50 (59.5%)       #> 10 SEX      M                    111 … 33 (38… 44 (52.4%)       34 (40.5%)       #> 11 RACE     AMERICAN INDIAN OR … 1 (0… NA      1 (1.19%)        NA               #> 12 RACE     BLACK OR AFRICAN AM… 23 (… 8 (9.3… 9 (10.71%)       6 (7.14%)        #> 13 RACE     WHITE                230 … 78 (90… 74 (88.10%)      78 (92.86%)       ## By actual treatment, without overall adtte %>%   dplyr::filter(SAFFL == \"Y\") %>%   dplyr::select(AGE, AGEGR1, SEX, EVNTDESC, TRTA) %>%   visR::get_tableone(strata = \"TRTA\", overall = FALSE) #> # A tibble: 12 × 5 #>    variable statistic                 Placebo  `Xanomeline Hi…` `Xanomeline Lo…` #>    <chr>    <chr>                     <chr>    <chr>            <chr>            #>  1 Sample   N                         86       84               84               #>  2 AGE      Mean (SD)                 75.2 (8… 74.4 (7.89)      75.7 (8.29)      #>  3 AGE      Median (IQR)              76 (69.… 76 (70.8-80)     77.5 (71-82)     #>  4 AGE      Min-max                   52-89    56-88            51-88            #>  5 AGE      Missing                   0 (0%)   0 (0%)           0 (0%)           #>  6 AGEGR1   <65                       14 (16.… 11 (13.1%)       8 (9.52%)        #>  7 AGEGR1   >80                       30 (34.… 18 (21.4%)       29 (34.52%)      #>  8 AGEGR1   65-80                     42 (48.… 55 (65.5%)       47 (55.95%)      #>  9 SEX      F                         53 (61.… 40 (47.6%)       50 (59.5%)       #> 10 SEX      M                         33 (38.… 44 (52.4%)       34 (40.5%)       #> 11 EVNTDESC Dematologic Event Occured 29 (33.… 61 (72.6%)       62 (73.8%)       #> 12 EVNTDESC Study Completion Date     57 (66.… 23 (27.4%)       22 (26.2%)"},{"path":"https://openpharma.github.io/visR/reference/legendopts.html","id":null,"dir":"Reference","previous_headings":"","what":"Translates options for legend into a list that can be passed to ggplot2 — legendopts","title":"Translates options for legend into a list that can be passed to ggplot2 — legendopts","text":"function takes legend position orientation, defined user puts list ggplot2.","code":""},{"path":"https://openpharma.github.io/visR/reference/legendopts.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Translates options for legend into a list that can be passed to ggplot2 — legendopts","text":"","code":"legendopts(legend_position = \"right\", legend_orientation = NULL)"},{"path":"https://openpharma.github.io/visR/reference/legendopts.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Translates options for legend into a list that can be passed to ggplot2 — legendopts","text":"legend_position Default = \"right\". legend_orientation Default = NULL.","code":""},{"path":"https://openpharma.github.io/visR/reference/legendopts.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Translates options for legend into a list that can be passed to ggplot2 — legendopts","text":"List legend options ggplot2.","code":""},{"path":"https://openpharma.github.io/visR/reference/reexports.html","id":null,"dir":"Reference","previous_headings":"","what":"Objects exported from other packages — reexports","title":"Objects exported from other packages — reexports","text":"objects imported packages. Follow links see documentation. dplyr %>% survival Surv","code":""},{"path":"https://openpharma.github.io/visR/reference/render.html","id":null,"dir":"Reference","previous_headings":"","what":"Render a data.frame, risktable, or tableone object as a table — render","title":"Render a data.frame, risktable, or tableone object as a table — render","text":"Render previously created data.frame, tibble tableone object html, rtf latex","code":""},{"path":"https://openpharma.github.io/visR/reference/render.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Render a data.frame, risktable, or tableone object as a table — render","text":"","code":"render(   data,   title = \"\",   datasource,   footnote = \"\",   output_format = \"html\",   engine = \"gt\",   download_format = c(\"copy\", \"csv\", \"excel\") )"},{"path":"https://openpharma.github.io/visR/reference/render.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Render a data.frame, risktable, or tableone object as a table — render","text":"data Input data.frame tibble visualize title Specify title text string displayed rendered table. Default title. datasource String specifying data source underlying data set. Default title. footnote String specifying additional information displayed footnote alongside data source specifications statistical tests. output_format Type output returned, can \"html\" \"latex\". Default \"html\". engine \"html\" selected output_format, one can chose using kable, gt DT engine render output table. Default \"gt\". download_format Options formats generated downloading data. Default list \"c('copy', 'csv', 'excel')\".","code":""},{"path":"https://openpharma.github.io/visR/reference/render.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Render a data.frame, risktable, or tableone object as a table — render","text":"table data structure possible interactive functionality depending choice engine.","code":""},{"path":"https://openpharma.github.io/visR/reference/summarize_long.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate summary statistics from a vector — summarize_long","title":"Calculate summary statistics from a vector — summarize_long","text":"Calculates several summary statistics. summary statistics depend vector class","code":""},{"path":"https://openpharma.github.io/visR/reference/summarize_long.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate summary statistics from a vector — summarize_long","text":"","code":"summarize_long(x)  # S3 method for factor summarize_long(x)  # S3 method for integer summarize_long(x)  # S3 method for numeric summarize_long(x)  # S3 method for default summarize_long(x)"},{"path":"https://openpharma.github.io/visR/reference/summarize_long.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate summary statistics from a vector — summarize_long","text":"x object","code":""},{"path":"https://openpharma.github.io/visR/reference/summarize_long.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate summary statistics from a vector — summarize_long","text":"summarized version input.","code":""},{"path":"https://openpharma.github.io/visR/reference/summarize_short.html","id":null,"dir":"Reference","previous_headings":"","what":"Create abbreviated variable summary for table1 — summarize_short","title":"Create abbreviated variable summary for table1 — summarize_short","text":"function creates summaries combines multiple summary measures single formatted string. Create variable summary numeric variables. Calculates mean (standard deviation), median (IQR), min-max range N/% missing elements numeric vector. Create variable summary integer variables Calculates mean (standard deviation), median (IQR), min-max range N/% missing elements integer vector.","code":""},{"path":"https://openpharma.github.io/visR/reference/summarize_short.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create abbreviated variable summary for table1 — summarize_short","text":"","code":"summarize_short(x)  # S3 method for factor summarize_short(x)  # S3 method for numeric summarize_short(x)  # S3 method for integer summarize_short(x)  # S3 method for default summarize_short(x)"},{"path":"https://openpharma.github.io/visR/reference/summarize_short.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create abbreviated variable summary for table1 — summarize_short","text":"x vector summarized","code":""},{"path":"https://openpharma.github.io/visR/reference/summarize_short.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create abbreviated variable summary for table1 — summarize_short","text":"summarized less detailed version input.","code":""},{"path":"https://openpharma.github.io/visR/reference/Surv_CNSR.html","id":null,"dir":"Reference","previous_headings":"","what":"Create a Survival Object from CDISC Data — Surv_CNSR","title":"Create a Survival Object from CDISC Data — Surv_CNSR","text":"aim Surv_CNSR() map inconsistency convention survival package CDISC ADaM ADTTE data model. function creates survival object (e.g. survival::Surv()) uses CDISC ADaM ADTTE coding conventions converts arguments status/event variable convention used survival package. AVAL CNSR arguments passed survival::Surv(time = AVAL, event = 1 - CNSR, type = \"right\", origin = 0).","code":""},{"path":"https://openpharma.github.io/visR/reference/Surv_CNSR.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create a Survival Object from CDISC Data — Surv_CNSR","text":"","code":"Surv_CNSR(AVAL, CNSR)"},{"path":"https://openpharma.github.io/visR/reference/Surv_CNSR.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create a Survival Object from CDISC Data — Surv_CNSR","text":"AVAL follow-time. follow-time assumed originate zero. argument passed, default value column/vector named AVAL. CNSR censoring indicator 1=censored 0=death/event. argument passed, default value column/vector named CNSR.","code":""},{"path":"https://openpharma.github.io/visR/reference/Surv_CNSR.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create a Survival Object from CDISC Data — Surv_CNSR","text":"Object class 'Surv'","code":""},{"path":"https://openpharma.github.io/visR/reference/Surv_CNSR.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create a Survival Object from CDISC Data — Surv_CNSR","text":"Surv_CNSR() function creates survival object utilizing expected data structure CDISC ADaM ADTTE data model, mapping CDISC ADaM ADTTE coding conventions expected status/event variable convention used survival package---specifically, coding convention used status/event indicator. survival package expects status/event indicator following format: 0=alive, 1=dead. accepted choices TRUE/FALSE (TRUE = death) 1/2 (2=death). final risky option omit indicator variable, case subjects assumed event. CDISC ADaM ADTTE data model adopts different coding convention event/status indicator. Using convention, event/status variable named 'CNSR' uses following coding: censor = 1, status/event = 0.","code":""},{"path":[]},{"path":"https://openpharma.github.io/visR/reference/Surv_CNSR.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create a Survival Object from CDISC Data — Surv_CNSR","text":"","code":"# Use the `Surv_CNSR()` function with visR functions adtte %>%   visR::estimate_KM(formula = visR::Surv_CNSR() ~ SEX) #> Call: ~survival::survfit(formula = visR::Surv_CNSR() ~ SEX, data = data) #>  #>         n events median 0.95LCL 0.95UCL #> SEX=F 143     80     64      47      96 #> SEX=M 111     72     41      30      57  # Use the `Surv_CNSR()` function with functions from other packages as well survival::survfit(visR::Surv_CNSR() ~ SEX, data = adtte) #> Call: survfit(formula = visR::Surv_CNSR() ~ SEX, data = adtte) #>  #>         n events median 0.95LCL 0.95UCL #> SEX=F 143     80     64      47      96 #> SEX=M 111     72     41      30      57 survival::survreg(visR::Surv_CNSR() ~ SEX + AGE, data = adtte) %>%   broom::tidy() #> # A tibble: 4 × 5 #>   term        estimate std.error statistic    p.value #>   <chr>          <dbl>     <dbl>     <dbl>      <dbl> #> 1 (Intercept)   3.97      0.993      4.00  0.0000645  #> 2 SEXM         -0.412     0.226     -1.82  0.0689     #> 3 AGE           0.0131    0.0131     0.997 0.319      #> 4 Log(scale)    0.326     0.0676     4.83  0.00000139"},{"path":"https://openpharma.github.io/visR/reference/tableone.html","id":null,"dir":"Reference","previous_headings":"","what":"Display a summary Table (i.e. table one) — tableone","title":"Display a summary Table (i.e. table one) — tableone","text":"Wrapper function produce summary table (.e. Table One). Create render summary table dataset. typical example summary table \"table one\", first table applied medical research manuscript. Calculate summary statistics present formatted table","code":""},{"path":"https://openpharma.github.io/visR/reference/tableone.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Display a summary Table (i.e. table one) — tableone","text":"","code":"tableone(   data,   title,   datasource,   footnote = \"\",   strata = NULL,   overall = TRUE,   summary_function = summarize_short,   ... )"},{"path":"https://openpharma.github.io/visR/reference/tableone.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Display a summary Table (i.e. table one) — tableone","text":"data dataframe tibble visualize title Table title include rendered table. Input text string. datasource String specifying datasource underlying data set footnote Table footnote include rendered table. Input text string. strata Character vector column names use stratification summary table. Default: NULL , indicates stratification. overall TRUE, summary statistics overall dataset also calculated summary_function function defining summary statistics numeric categorical values Pre-implemented functions summarize_long summarize_short ... Pass options render_table","code":""},{"path":"https://openpharma.github.io/visR/reference/tableone.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Display a summary Table (i.e. table one) — tableone","text":"table-like data structure, possibly interactive depending choice engine","code":""},{"path":"https://openpharma.github.io/visR/reference/tableone.html","id":"example-output","dir":"Reference","previous_headings":"","what":"Example Output","title":"Display a summary Table (i.e. table one) — tableone","text":"tableone(engine = \"gt\")  tableone(engine = \"DT\")  tableone(engine = \"kable\")  tableone(engine = \"kable\", output_format = \"latex\")","code":""},{"path":"https://openpharma.github.io/visR/reference/tableone.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Display a summary Table (i.e. table one) — tableone","text":"","code":"# metadata for table t1_title <- \"Cohort Summary\" t1_ds <- \"ADaM Interim Dataset for Time-to-Event Analysis\" t1_fn <- \"My table one footnote\"   ## table by treatment - without overall and render with GT tbl_gt <-   adtte %>%   dplyr::filter(SAFFL == \"Y\") %>%   dplyr::select(AGE, AGEGR1, SEX, EVNTDESC, TRTA) %>%   visR::tableone(     strata = \"TRTA\",     overall = FALSE,     title = t1_title,     datasource = t1_ds,     footnote = t1_fn,     engine = \"gt\"   )  ## table by treatment - without overall and render with DT tbl_DT <-   adtte %>%   dplyr::filter(SAFFL == \"Y\") %>%   dplyr::select(AGE, AGEGR1, SEX, EVNTDESC, TRTA) %>%   visR::tableone(     strata = \"TRTA\",     overall = FALSE,     title = t1_title,     datasource = t1_ds,     footnote = t1_fn,     engine = \"DT\"   )  ## table by treatment - without overall and render with kable tbl_kable_html <-   adtte %>%   dplyr::filter(SAFFL == \"Y\") %>%   dplyr::select(AGE, AGEGR1, SEX, EVNTDESC, TRTA) %>%   visR::tableone(     strata = \"TRTA\",     overall = FALSE,     title = t1_title,     datasource = t1_ds,     footnote = t1_fn,     engine = \"kable\"   )  ## table by treatment - without overall and render with kable as ## a latex table format rather than html tbl_kable_latex <-   adtte %>%   dplyr::filter(SAFFL == \"Y\") %>%   dplyr::select(AGE, AGEGR1, SEX, EVNTDESC, TRTA) %>%   visR::tableone(     strata = \"TRTA\",     overall = FALSE,     title = t1_title,     datasource = t1_ds,     footnote = t1_fn,     output_format = \"latex\",     engine = \"kable\"   )"},{"path":"https://openpharma.github.io/visR/reference/the_lhs.html","id":null,"dir":"Reference","previous_headings":"","what":"Find the ","title":"Find the ","text":"function finds left-hand sided symbol magrittr pipe returns character.","code":""},{"path":"https://openpharma.github.io/visR/reference/the_lhs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Find the ","text":"","code":"the_lhs()"},{"path":"https://openpharma.github.io/visR/reference/the_lhs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Find the ","text":"Left-hand sided symbol string magrittr pipe.","code":""},{"path":"https://openpharma.github.io/visR/reference/the_lhs.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Find the ","text":"https://github.com/tidyverse/magrittr/issues/115#issuecomment-173894787","code":""},{"path":"https://openpharma.github.io/visR/reference/the_lhs.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Find the ","text":"","code":"blah <- function(x) the_lhs() adtte %>%   blah() #> [1] \"adtte\""},{"path":"https://openpharma.github.io/visR/reference/tidyme.html","id":null,"dir":"Reference","previous_headings":"","what":"Extended tidy cleaning of selected objects using S3 method — tidyme","title":"Extended tidy cleaning of selected objects using S3 method — tidyme","text":"S3 method extended tidying selected model outputs. Note visR method retains original nomenclature objects, adds one broom::tidy ensure compatibility tidy workflows. default method relies broom::tidy return tidied object","code":""},{"path":"https://openpharma.github.io/visR/reference/tidyme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extended tidy cleaning of selected objects using S3 method — tidyme","text":"","code":"tidyme(x, ...)  # S3 method for default tidyme(x, ...)  # S3 method for survfit tidyme(x, ...)"},{"path":"https://openpharma.github.io/visR/reference/tidyme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extended tidy cleaning of selected objects using S3 method — tidyme","text":"x S3 object ... arguments passed method","code":""},{"path":"https://openpharma.github.io/visR/reference/tidyme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extended tidy cleaning of selected objects using S3 method — tidyme","text":"Data frame containing list elements S3 object columns. column 'strata' factor ensure strata sorted agreement order survfit object","code":""},{"path":[]},{"path":"https://openpharma.github.io/visR/reference/tidyme.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extended tidy cleaning of selected objects using S3 method — tidyme","text":"","code":"## Extended tidying for a survfit object surv_object <- visR::estimate_KM(data = adtte, strata = \"TRTA\") tidied <- visR::tidyme(surv_object)  ## Tidyme for non-included classes data <- cars lm_object <- stats::lm(data = cars, speed ~ dist) lm_tidied <- visR::tidyme(lm_object) #> tidyme S3 default method (broom::tidy) used. lm_tidied #>          term  estimate  std.error statistic      p.value #> 1 (Intercept) 8.2839056 0.87438449  9.473985 1.440974e-12 #> 2        dist 0.1655676 0.01749448  9.463990 1.489836e-12"},{"path":"https://openpharma.github.io/visR/reference/visR-Global.html","id":null,"dir":"Reference","previous_headings":"","what":"visR package — visR Global","title":"visR package — visR Global","text":"Set global variables","code":""},{"path":"https://openpharma.github.io/visR/reference/visR-package.html","id":null,"dir":"Reference","previous_headings":"","what":"visR: Clinical Graphs and Tables Adhering to Graphical Principles — visR-package","title":"visR: Clinical Graphs and Tables Adhering to Graphical Principles — visR-package","text":"enable fit--purpose, reusable clinical medical research focused visualizations tables sensible defaults based graphical principles described : \"Vandemeulebroecke et al. (2018)\" doi:10.1002/pst.1912 , \"Vandemeulebroecke et al. (2019)\" doi:10.1002/psp4.12455 , \"Morris et al. (2019)\" doi:10.1136/bmjopen-2019-030215 .","code":""},{"path":[]},{"path":"https://openpharma.github.io/visR/reference/visR-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"visR: Clinical Graphs and Tables Adhering to Graphical Principles — visR-package","text":"Maintainer: Mark Baillie bailliem@gmail.com [copyright holder] Authors: Diego Saldana diego.saldana@roche.com Charlotta Fruechtenicht charlotta.fruechtenicht@roche.com Marc Vandemeulebroecke marc.vandemeulebroecke@novartis.com Thanos Siadimas thanos.siadimas@roche.com Pawel Kawski pawel.kawski@contractors.roche.com Steven Haesendonckx shaesen2@.jnj.com James Black james.black.jb2@roche.com Pelagia Alexandra Papadopoulou PPapadop@.jnj.com Tim Treis tim.treis@outlook.de Rebecca Albrecht rebecca.albrecht.dietsch@gmail.com Daniel D. Sjoberg danield.sjoberg@gmail.com (ORCID) contributors: Ardalan Mirshani ardeeshany@gmail.com [contributor]","code":""},{"path":"https://openpharma.github.io/visR/reference/visr.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot a supported S3 object — visr","title":"Plot a supported S3 object — visr","text":"S3 method creating plots directly objects using ggplot2, similar base R plot() function. S3 function draw Consort flow diagram chart.","code":""},{"path":"https://openpharma.github.io/visR/reference/visr.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot a supported S3 object — visr","text":"","code":"visr(x, ...)  # S3 method for default visr(x, ...)  # S3 method for survfit visr(   x = NULL,   x_label = NULL,   y_label = NULL,   x_units = NULL,   x_ticks = NULL,   y_ticks = NULL,   fun = \"surv\",   legend_position = \"right\",   ... )  # S3 method for attrition visr(   x,   description_column_name = \"Criteria\",   value_column_name = \"Remaining N\",   complement_column_name = \"\",   box_width = 50,   font_size = 12,   fill = \"white\",   border = \"black\",   ... )  # S3 method for tidycuminc visr(   x = NULL,   x_label = \"Time\",   y_label = \"Cumulative Incidence\",   x_units = NULL,   x_ticks = pretty(x$tidy$time, 10),   y_ticks = pretty(c(0, 1), 5),   legend_position = \"right\",   ... )"},{"path":"https://openpharma.github.io/visR/reference/visr.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot a supported S3 object — visr","text":"x Object class survfit, attritiontable, tidycuminc ... arguments passed method x_label character Label x-axis. specified, function look \"PARAM\" \"PARAMCD\" information original data set (CDISC standards). \"PARAM\"/\"PARAMCD\" information available, default x-axis label \"Time\". y_label character Label y-axis. specified, default proposal, depending fun argument. x_units Unit added x_label (x_label (x_unit)). Default NULL. x_ticks Ticks x-axis. specified, default proposal. y_ticks Ticks y-axis. specified, default proposal based fun argument. fun Function represents scale estimate. current options : surv survival probability. default. log log survival probability event failure probability cloglog log(-log(survival probability)) pct survival percentage logpct log survival percentage cumhaz cumulative hazard legend_position Specifies legend position plot. Character values allowed \"top\" \"left\" \"bottom\" \"right\". Numeric coordinates also allowed. Default \"right\". description_column_name character Name column containing inclusion descriptions value_column_name character Name column containing remaining sample counts complement_column_name character Optional: Name column containing exclusion descriptions box_width character box width box flow chart font_size character fontsize pt fill color (string hexcode) use fill boxes flowchart border color (string hexcode) use borders boxes flowchart","code":""},{"path":"https://openpharma.github.io/visR/reference/visr.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot a supported S3 object — visr","text":"Object class ggplot ggsurvplot survfit objects.","code":""},{"path":[]},{"path":"https://openpharma.github.io/visR/reference/visr.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plot a supported S3 object — visr","text":"","code":"# fit KM km_fit <- survival::survfit(survival::Surv(AVAL, 1 - CNSR) ~ TRTP, data = adtte)  # plot curves using survival plot function plot(km_fit)   # plot same curves using visR::visr plotting function visR::visr(km_fit)   # estimate KM using visR wrapper survfit_object <- visR::estimate_KM(data = adtte, strata = \"TRTP\")  # Plot survival probability visR::visr(survfit_object, fun = \"surv\")   # Plot survival percentage visR::visr(survfit_object, fun = \"pct\")   # Plot cumulative hazard visR::visr(survfit_object, fun = \"cloglog\") #> Warning: NAs introduced by y-axis transformation.    ## Create attrition attrition <- visR::get_attrition(adtte,   criteria_descriptions = c(     \"1. Not in Placebo Group\",     \"2. Be 75 years of age or older.\",     \"3. White\",     \"4. Female\"   ),   criteria_conditions = c(     \"TRTP != 'Placebo'\",     \"AGE >= 75\",     \"RACE=='WHITE'\",     \"SEX=='F'\"   ),   subject_column_name = \"USUBJID\" )  ## Draw a CONSORT attrition chart without specifying extra text for the complement attrition %>%   visr(\"Criteria\", \"Remaining N\")   ## Add detailed complement descriptions to the \"exclusion\" part of the CONSORT diagram # Step 1. Add new column to attrition dataframe attrition$Complement <- c(   \"NA\",   \"Placebo Group\",   \"Younger than 75 years\",   \"Non-White\",   \"Male\" )  # Step 2. Define the name of the column in the call to the plotting function attrition %>%   visr(\"Criteria\", \"Remaining N\", \"Complement\")   ## Styling the CONSORT flowchart # Change the fill and outline of the boxes in the flowchart attrition %>%   visr(\"Criteria\", \"Remaining N\", \"Complement\", fill = \"lightblue\", border = \"grey\")   ## Adjust the font size in the boxes attrition %>%   visr(\"Criteria\", \"Remaining N\", font_size = 10)"},{"path":[]},{"path":"https://openpharma.github.io/visR/news/index.html","id":"new-functions-0-3-0","dir":"Changelog","previous_headings":"","what":"New functions","title":"visR 0.3.0","text":"Highlight specific strata survival plots using add_highlight(). Indicate quantiles survival plots using add_quantiles(). Estimation cumulative incidence presence competing risks now possible estimate_cuminc(). risk estimates can plotted similarly estimates estimate_KM() using visr() function. Function Surv_CNSR() used CDISC ADTTE conventions default values time status indicators time--event analyses. note, status variable must coded 0/1 1 indicating observation censored. (#391)","code":""},{"path":"https://openpharma.github.io/visR/news/index.html","id":"breaking-changes-0-3-0","dir":"Changelog","previous_headings":"","what":"Breaking Changes","title":"visR 0.3.0","text":"AlignPlots() renamed align_plots().","code":""},{"path":"https://openpharma.github.io/visR/news/index.html","id":"bug-fixes-0-3-0","dir":"Changelog","previous_headings":"","what":"Bug Fixes","title":"visR 0.3.0","text":"Fix get_pvalue() estimate_KM() objects data piped modifications (e.g. dplyr::filter(), dplyr::mutate()). Fix add_risktable() estimates assigned incorrect label. Review unit testing estimate_KM(formula=) argument. (#399) Fixed bug define_theme(strata=). (#388) Fix discrepancy issue saving survfit() call estimate_KM(). (#365) Added check class(x)==. (#358) Fix documentation S3 method visr(). (#301)","code":""},{"path":"https://openpharma.github.io/visR/news/index.html","id":"other-updates-0-3-0","dir":"Changelog","previous_headings":"","what":"Other Updates","title":"visR 0.3.0","text":"Stratifying variable names removed legend visr.survfit() figures, legend title now describes stratifying variable(s). (#343) estimate_KM() function gains experimental formula= argument. argument used, AVAL, CNSR, strata arguments typically used construct formula ignored. (#379) add_risktable rowgutter argument allow spacing plot risktables strata variable now removed body tableone() results. (#254) visr.survfit() function longer warns x-axis label PARAM column found original data set. (#378) call saved estimate_KM() object updated quosure–ensuring original function call can always recalled. define_theme()updated ensure strata present theme displayed. (#388) Removed external dependency easyalluvial package. (#383) Reduced number exported functions. (#381) Improved documentation visr() generic functions. (#301) (#357) Unit testing updated relevant 100% code coverage function requirements tested. README page updated additional examples. (#425) lifecycle badges added function level indicate functions still experimental questioning phases. (#398)","code":""},{"path":"https://openpharma.github.io/visR/news/index.html","id":"visr-020","dir":"Changelog","previous_headings":"","what":"visR 0.2.0","title":"visR 0.2.0","text":"CRAN release: 2021-06-14 Initial CRAN release.","code":""}]
